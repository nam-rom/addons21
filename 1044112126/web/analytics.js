/*!
 * AMBOSS Anki Add-on
 * 
 * Copyright (C) 2019-2020 AMBOSS MD Inc. <https://www.amboss.com/us>
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version, with the additions
 * listed at the end of the license file that accompanied this program.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 * 
 */
var ambossAddon="object"==typeof ambossAddon?ambossAddon:{};ambossAddon.analytics=function(Q){var F={};function B(n){if(F[n])return F[n].exports;var U=F[n]={i:n,l:!1,exports:{}};return Q[n].call(U.exports,U,U.exports,B),U.l=!0,U.exports}return B.m=Q,B.c=F,B.d=function(Q,F,n){B.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:n})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,F){if(1&F&&(Q=B(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var n=Object.create(null);if(B.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var U in Q)B.d(n,U,function(F){return Q[F]}.bind(null,U));return n},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="",B(B.s=1)}([,function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"track\", function() { return track; });\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// disable cookies\ndocument.__defineGetter__('cookie', function () {\n  return '';\n});\n\n!function () {\n  var analytics = window.analytics = window.analytics || [];\n\n  if (!analytics.initialize && !analytics.invoked) {\n    analytics.invoked = !0;\n    analytics.methods = ['reset', 'setAnonymousId', 'identify', 'track', 'page'];\n\n    analytics.factory = function (t) {\n      return function () {\n        var e = Array.prototype.slice.call(arguments);\n        e.unshift(t);\n        analytics.push(e);\n        return analytics;\n      };\n    };\n\n    for (var t = 0; t < analytics.methods.length; t++) {\n      var e = analytics.methods[t];\n      analytics[e] = analytics.factory(e);\n    }\n\n    analytics.load = function (token, options, endpoint) {\n      var n = document.createElement('script');\n      n.type = 'text/javascript';\n      n.async = !0;\n      n.src = endpoint + token + '/a.min.js';\n      var a = document.getElementsByTagName('script')[0];\n      a.parentNode.insertBefore(n, a);\n      analytics._loadOptions = options;\n    };\n\n    analytics.SNIPPET_VERSION = '4.1.0';\n    analytics.load(\"JabXayKea69oVRQrDghBRiGJ3g7pdHdP\", {\n      integrations: {\n        All: false,\n        'Segment.io': true\n      }\n    }, \"https://www.amboss.com/us/api/sprx/cdn/\");\n  }\n}();\n\nconst ambossAnkiVersion = () => {\n  return new Promise(resolve => {\n    pycmd('amboss:version:ankiVersion', result => {\n      resolve(result || 'unknown');\n    });\n  });\n};\n\nconst ambossAddonVersion = () => {\n  return new Promise(resolve => {\n    pycmd('amboss:version:addonVersion', result => {\n      resolve(result || 'unknown');\n    });\n  });\n};\n\nconst ambossAnonId = () => {\n  return new Promise(resolve => {\n    pycmd('amboss:profile:anonId', result => {\n      resolve(result || null);\n    });\n  });\n};\n\nconst ambossUserId = () => {\n  return new Promise(resolve => {\n    pycmd('amboss:profile:userId', result => {\n      resolve(result || null);\n    });\n  });\n};\n\nconst ambossContextOptions = () => {\n  return new Promise(resolve => {\n    Promise.all([ambossAnkiVersion(), ambossAddonVersion(), ambossAnonId(), ambossUserId()]).then(values => {\n      const [ankiVersion, addonVersion, anonId, userId] = values;\n\n      const options = _objectSpread(_objectSpread(_objectSpread({}, anonId ? {\n        anonymousId: anonId\n      } : {}), userId ? {\n        userId: userId\n      } : {}), {}, {\n        context: {\n          app: {\n            name: 'anki-addon',\n            version: addonVersion,\n            hostVersion: ankiVersion,\n            stage: \"production\",\n            ambossLanguage: \"en\",\n            channel: \"ankiweb\"\n          }\n        }\n      });\n\n      resolve(options);\n    });\n  });\n};\n\nconst track = (name, properties = {}) => {\n  if (analytics) {\n    Promise.resolve(ambossContextOptions()).then((contextOptions = {}) => {\n      const {\n        userId,\n        anonymousId\n      } = contextOptions;\n      const analyticsUser = typeof analytics.user === 'function' ? analytics.user() : {};\n      const analyticsId = typeof analyticsUser.id === 'function' && analyticsUser.id();\n      const analyticsAnonymousId = typeof analyticsUser.anonymousId === 'function' && analyticsUser.anonymousId();\n      const reset = typeof analytics.reset === 'function' && analytics.reset;\n      const identify = typeof analytics.identify === 'function' && analytics.identify;\n      const setAnonymousId = typeof analytics.setAnonymousId === 'function' && analytics.setAnonymousId;\n\n      if (!userId && analyticsId && reset) {\n        reset();\n      } else if (userId && userId !== analyticsId && identify) {\n        identify(userId);\n      }\n\n      if (anonymousId && anonymousId !== analyticsAnonymousId && setAnonymousId) {\n        setAnonymousId(anonymousId);\n      }\n\n      analytics.track(`anki-addon.${name}`, properties, contextOptions);\n\n      if (false) {}\n    });\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n")}]);