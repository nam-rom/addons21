/*!
 * AMBOSS Anki Add-on
 * 
 * Copyright (C) 2019-2020 AMBOSS MD Inc. <https://www.amboss.com/us>
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version, with the additions
 * listed at the end of the license file that accompanied this program.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 * 
 */
var ambossAddon="object"==typeof ambossAddon?ambossAddon:{};ambossAddon.tooltip=function(Q){var F={};function U(B){if(F[B])return F[B].exports;var s=F[B]={i:B,l:!1,exports:{}};return Q[B].call(s.exports,s,s.exports,U),s.l=!0,s.exports}return U.m=Q,U.c=F,U.d=function(Q,F,B){U.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:B})},U.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},U.t=function(Q,F){if(1&F&&(Q=U(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(U.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var s in Q)U.d(B,s,function(F){return Q[F]}.bind(null,s));return B},U.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return U.d(F,"a",F),F},U.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},U.p="",U(U.s=102)}({1:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"track\", function() { return track; });\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// disable cookies\ndocument.__defineGetter__('cookie', function () {\n  return '';\n});\n\n!function () {\n  var analytics = window.analytics = window.analytics || [];\n\n  if (!analytics.initialize && !analytics.invoked) {\n    analytics.invoked = !0;\n    analytics.methods = ['reset', 'setAnonymousId', 'identify', 'track', 'page'];\n\n    analytics.factory = function (t) {\n      return function () {\n        var e = Array.prototype.slice.call(arguments);\n        e.unshift(t);\n        analytics.push(e);\n        return analytics;\n      };\n    };\n\n    for (var t = 0; t < analytics.methods.length; t++) {\n      var e = analytics.methods[t];\n      analytics[e] = analytics.factory(e);\n    }\n\n    analytics.load = function (token, options, endpoint) {\n      var n = document.createElement('script');\n      n.type = 'text/javascript';\n      n.async = !0;\n      n.src = endpoint + token + '/a.min.js';\n      var a = document.getElementsByTagName('script')[0];\n      a.parentNode.insertBefore(n, a);\n      analytics._loadOptions = options;\n    };\n\n    analytics.SNIPPET_VERSION = '4.1.0';\n    analytics.load(\"JabXayKea69oVRQrDghBRiGJ3g7pdHdP\", {\n      integrations: {\n        All: false,\n        'Segment.io': true\n      }\n    }, \"https://www.amboss.com/us/api/sprx/cdn/\");\n  }\n}();\n\nconst ambossAnkiVersion = () => {\n  return new Promise(resolve => {\n    pycmd('amboss:version:ankiVersion', result => {\n      resolve(result || 'unknown');\n    });\n  });\n};\n\nconst ambossAddonVersion = () => {\n  return new Promise(resolve => {\n    pycmd('amboss:version:addonVersion', result => {\n      resolve(result || 'unknown');\n    });\n  });\n};\n\nconst ambossAnonId = () => {\n  return new Promise(resolve => {\n    pycmd('amboss:profile:anonId', result => {\n      resolve(result || null);\n    });\n  });\n};\n\nconst ambossUserId = () => {\n  return new Promise(resolve => {\n    pycmd('amboss:profile:userId', result => {\n      resolve(result || null);\n    });\n  });\n};\n\nconst ambossContextOptions = () => {\n  return new Promise(resolve => {\n    Promise.all([ambossAnkiVersion(), ambossAddonVersion(), ambossAnonId(), ambossUserId()]).then(values => {\n      const [ankiVersion, addonVersion, anonId, userId] = values;\n\n      const options = _objectSpread(_objectSpread(_objectSpread({}, anonId ? {\n        anonymousId: anonId\n      } : {}), userId ? {\n        userId: userId\n      } : {}), {}, {\n        context: {\n          app: {\n            name: 'anki-addon',\n            version: addonVersion,\n            hostVersion: ankiVersion,\n            stage: \"production\",\n            ambossLanguage: \"en\",\n            channel: \"ankiweb\"\n          }\n        }\n      });\n\n      resolve(options);\n    });\n  });\n};\n\nconst track = (name, properties = {}) => {\n  if (analytics) {\n    Promise.resolve(ambossContextOptions()).then((contextOptions = {}) => {\n      const {\n        userId,\n        anonymousId\n      } = contextOptions;\n      const analyticsUser = typeof analytics.user === 'function' ? analytics.user() : {};\n      const analyticsId = typeof analyticsUser.id === 'function' && analyticsUser.id();\n      const analyticsAnonymousId = typeof analyticsUser.anonymousId === 'function' && analyticsUser.anonymousId();\n      const reset = typeof analytics.reset === 'function' && analytics.reset;\n      const identify = typeof analytics.identify === 'function' && analytics.identify;\n      const setAnonymousId = typeof analytics.setAnonymousId === 'function' && analytics.setAnonymousId;\n\n      if (!userId && analyticsId && reset) {\n        reset();\n      } else if (userId && userId !== analyticsId && identify) {\n        identify(userId);\n      }\n\n      if (anonymousId && anonymousId !== analyticsAnonymousId && setAnonymousId) {\n        setAnonymousId(anonymousId);\n      }\n\n      analytics.track(`anki-addon.${name}`, properties, contextOptions);\n\n      if (false) {}\n    });\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n")},100:function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global) {/*\n Copyright (C) Federico Zivolo 2019\n Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).\n */\n(function (e, t) {\n   true ? module.exports = t() : undefined;\n})(this, function () {\n  'use strict';\n\n  function e(e) {\n    return e && '[object Function]' === {}.toString.call(e);\n  }\n\n  function t(e, t) {\n    if (1 !== e.nodeType) return [];\n    var o = e.ownerDocument.defaultView,\n        n = o.getComputedStyle(e, null);\n    return t ? n[t] : n;\n  }\n\n  function o(e) {\n    return 'HTML' === e.nodeName ? e : e.parentNode || e.host;\n  }\n\n  function n(e) {\n    if (!e) return document.body;\n\n    switch (e.nodeName) {\n      case 'HTML':\n      case 'BODY':\n        return e.ownerDocument.body;\n\n      case '#document':\n        return e.body;\n    }\n\n    var i = t(e),\n        r = i.overflow,\n        p = i.overflowX,\n        s = i.overflowY;\n    return /(auto|scroll|overlay)/.test(r + s + p) ? e : n(o(e));\n  }\n\n  function r(e) {\n    return 11 === e ? pe : 10 === e ? se : pe || se;\n  }\n\n  function p(e) {\n    if (!e) return document.documentElement;\n\n    for (var o = r(10) ? document.body : null, n = e.offsetParent || null; n === o && e.nextElementSibling;) n = (e = e.nextElementSibling).offsetParent;\n\n    var i = n && n.nodeName;\n    return i && 'BODY' !== i && 'HTML' !== i ? -1 !== ['TH', 'TD', 'TABLE'].indexOf(n.nodeName) && 'static' === t(n, 'position') ? p(n) : n : e ? e.ownerDocument.documentElement : document.documentElement;\n  }\n\n  function s(e) {\n    var t = e.nodeName;\n    return 'BODY' !== t && ('HTML' === t || p(e.firstElementChild) === e);\n  }\n\n  function d(e) {\n    return null === e.parentNode ? e : d(e.parentNode);\n  }\n\n  function a(e, t) {\n    if (!e || !e.nodeType || !t || !t.nodeType) return document.documentElement;\n    var o = e.compareDocumentPosition(t) & Node.DOCUMENT_POSITION_FOLLOWING,\n        n = o ? e : t,\n        i = o ? t : e,\n        r = document.createRange();\n    r.setStart(n, 0), r.setEnd(i, 0);\n    var l = r.commonAncestorContainer;\n    if (e !== l && t !== l || n.contains(i)) return s(l) ? l : p(l);\n    var f = d(e);\n    return f.host ? a(f.host, t) : a(e, d(t).host);\n  }\n\n  function l(e) {\n    var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 'top',\n        o = 'top' === t ? 'scrollTop' : 'scrollLeft',\n        n = e.nodeName;\n\n    if ('BODY' === n || 'HTML' === n) {\n      var i = e.ownerDocument.documentElement,\n          r = e.ownerDocument.scrollingElement || i;\n      return r[o];\n    }\n\n    return e[o];\n  }\n\n  function f(e, t) {\n    var o = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],\n        n = l(t, 'top'),\n        i = l(t, 'left'),\n        r = o ? -1 : 1;\n    return e.top += n * r, e.bottom += n * r, e.left += i * r, e.right += i * r, e;\n  }\n\n  function m(e, t) {\n    var o = 'x' === t ? 'Left' : 'Top',\n        n = 'Left' == o ? 'Right' : 'Bottom';\n    return parseFloat(e['border' + o + 'Width'], 10) + parseFloat(e['border' + n + 'Width'], 10);\n  }\n\n  function h(e, t, o, n) {\n    return ee(t['offset' + e], t['scroll' + e], o['client' + e], o['offset' + e], o['scroll' + e], r(10) ? parseInt(o['offset' + e]) + parseInt(n['margin' + ('Height' === e ? 'Top' : 'Left')]) + parseInt(n['margin' + ('Height' === e ? 'Bottom' : 'Right')]) : 0);\n  }\n\n  function c(e) {\n    var t = e.body,\n        o = e.documentElement,\n        n = r(10) && getComputedStyle(o);\n    return {\n      height: h('Height', t, o, n),\n      width: h('Width', t, o, n)\n    };\n  }\n\n  function g(e) {\n    return fe({}, e, {\n      right: e.left + e.width,\n      bottom: e.top + e.height\n    });\n  }\n\n  function u(e) {\n    var o = {};\n\n    try {\n      if (r(10)) {\n        o = e.getBoundingClientRect();\n        var n = l(e, 'top'),\n            i = l(e, 'left');\n        o.top += n, o.left += i, o.bottom += n, o.right += i;\n      } else o = e.getBoundingClientRect();\n    } catch (t) {}\n\n    var p = {\n      left: o.left,\n      top: o.top,\n      width: o.right - o.left,\n      height: o.bottom - o.top\n    },\n        s = 'HTML' === e.nodeName ? c(e.ownerDocument) : {},\n        d = s.width || e.clientWidth || p.right - p.left,\n        a = s.height || e.clientHeight || p.bottom - p.top,\n        f = e.offsetWidth - d,\n        h = e.offsetHeight - a;\n\n    if (f || h) {\n      var u = t(e);\n      f -= m(u, 'x'), h -= m(u, 'y'), p.width -= f, p.height -= h;\n    }\n\n    return g(p);\n  }\n\n  function b(e, o) {\n    var i = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],\n        p = r(10),\n        s = 'HTML' === o.nodeName,\n        d = u(e),\n        a = u(o),\n        l = n(e),\n        m = t(o),\n        h = parseFloat(m.borderTopWidth, 10),\n        c = parseFloat(m.borderLeftWidth, 10);\n    i && s && (a.top = ee(a.top, 0), a.left = ee(a.left, 0));\n    var b = g({\n      top: d.top - a.top - h,\n      left: d.left - a.left - c,\n      width: d.width,\n      height: d.height\n    });\n\n    if (b.marginTop = 0, b.marginLeft = 0, !p && s) {\n      var w = parseFloat(m.marginTop, 10),\n          y = parseFloat(m.marginLeft, 10);\n      b.top -= h - w, b.bottom -= h - w, b.left -= c - y, b.right -= c - y, b.marginTop = w, b.marginLeft = y;\n    }\n\n    return (p && !i ? o.contains(l) : o === l && 'BODY' !== l.nodeName) && (b = f(b, o)), b;\n  }\n\n  function w(e) {\n    var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],\n        o = e.ownerDocument.documentElement,\n        n = b(e, o),\n        i = ee(o.clientWidth, window.innerWidth || 0),\n        r = ee(o.clientHeight, window.innerHeight || 0),\n        p = t ? 0 : l(o),\n        s = t ? 0 : l(o, 'left'),\n        d = {\n      top: p - n.top + n.marginTop,\n      left: s - n.left + n.marginLeft,\n      width: i,\n      height: r\n    };\n    return g(d);\n  }\n\n  function y(e) {\n    var n = e.nodeName;\n    if ('BODY' === n || 'HTML' === n) return !1;\n    if ('fixed' === t(e, 'position')) return !0;\n    var i = o(e);\n    return !!i && y(i);\n  }\n\n  function E(e) {\n    if (!e || !e.parentElement || r()) return document.documentElement;\n\n    for (var o = e.parentElement; o && 'none' === t(o, 'transform');) o = o.parentElement;\n\n    return o || document.documentElement;\n  }\n\n  function v(e, t, i, r) {\n    var p = 4 < arguments.length && void 0 !== arguments[4] && arguments[4],\n        s = {\n      top: 0,\n      left: 0\n    },\n        d = p ? E(e) : a(e, t);\n    if ('viewport' === r) s = w(d, p);else {\n      var l;\n      'scrollParent' === r ? (l = n(o(t)), 'BODY' === l.nodeName && (l = e.ownerDocument.documentElement)) : 'window' === r ? l = e.ownerDocument.documentElement : l = r;\n      var f = b(l, d, p);\n\n      if ('HTML' === l.nodeName && !y(d)) {\n        var m = c(e.ownerDocument),\n            h = m.height,\n            g = m.width;\n        s.top += f.top - f.marginTop, s.bottom = h + f.top, s.left += f.left - f.marginLeft, s.right = g + f.left;\n      } else s = f;\n    }\n    i = i || 0;\n    var u = 'number' == typeof i;\n    return s.left += u ? i : i.left || 0, s.top += u ? i : i.top || 0, s.right -= u ? i : i.right || 0, s.bottom -= u ? i : i.bottom || 0, s;\n  }\n\n  function x(e) {\n    var t = e.width,\n        o = e.height;\n    return t * o;\n  }\n\n  function O(e, t, o, n, i) {\n    var r = 5 < arguments.length && void 0 !== arguments[5] ? arguments[5] : 0;\n    if (-1 === e.indexOf('auto')) return e;\n    var p = v(o, n, r, i),\n        s = {\n      top: {\n        width: p.width,\n        height: t.top - p.top\n      },\n      right: {\n        width: p.right - t.right,\n        height: p.height\n      },\n      bottom: {\n        width: p.width,\n        height: p.bottom - t.bottom\n      },\n      left: {\n        width: t.left - p.left,\n        height: p.height\n      }\n    },\n        d = Object.keys(s).map(function (e) {\n      return fe({\n        key: e\n      }, s[e], {\n        area: x(s[e])\n      });\n    }).sort(function (e, t) {\n      return t.area - e.area;\n    }),\n        a = d.filter(function (e) {\n      var t = e.width,\n          n = e.height;\n      return t >= o.clientWidth && n >= o.clientHeight;\n    }),\n        l = 0 < a.length ? a[0].key : d[0].key,\n        f = e.split('-')[1];\n    return l + (f ? '-' + f : '');\n  }\n\n  function L(e, t, o) {\n    var n = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null,\n        i = n ? E(t) : a(t, o);\n    return b(o, i, n);\n  }\n\n  function S(e) {\n    var t = e.ownerDocument.defaultView,\n        o = t.getComputedStyle(e),\n        n = parseFloat(o.marginTop || 0) + parseFloat(o.marginBottom || 0),\n        i = parseFloat(o.marginLeft || 0) + parseFloat(o.marginRight || 0),\n        r = {\n      width: e.offsetWidth + i,\n      height: e.offsetHeight + n\n    };\n    return r;\n  }\n\n  function T(e) {\n    var t = {\n      left: 'right',\n      right: 'left',\n      bottom: 'top',\n      top: 'bottom'\n    };\n    return e.replace(/left|right|bottom|top/g, function (e) {\n      return t[e];\n    });\n  }\n\n  function C(e, t, o) {\n    o = o.split('-')[0];\n    var n = S(e),\n        i = {\n      width: n.width,\n      height: n.height\n    },\n        r = -1 !== ['right', 'left'].indexOf(o),\n        p = r ? 'top' : 'left',\n        s = r ? 'left' : 'top',\n        d = r ? 'height' : 'width',\n        a = r ? 'width' : 'height';\n    return i[p] = t[p] + t[d] / 2 - n[d] / 2, i[s] = o === s ? t[s] - n[a] : t[T(s)], i;\n  }\n\n  function D(e, t) {\n    return Array.prototype.find ? e.find(t) : e.filter(t)[0];\n  }\n\n  function N(e, t, o) {\n    if (Array.prototype.findIndex) return e.findIndex(function (e) {\n      return e[t] === o;\n    });\n    var n = D(e, function (e) {\n      return e[t] === o;\n    });\n    return e.indexOf(n);\n  }\n\n  function P(t, o, n) {\n    var i = void 0 === n ? t : t.slice(0, N(t, 'name', n));\n    return i.forEach(function (t) {\n      t['function'] && console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n      var n = t['function'] || t.fn;\n      t.enabled && e(n) && (o.offsets.popper = g(o.offsets.popper), o.offsets.reference = g(o.offsets.reference), o = n(o, t));\n    }), o;\n  }\n\n  function k() {\n    if (!this.state.isDestroyed) {\n      var e = {\n        instance: this,\n        styles: {},\n        arrowStyles: {},\n        attributes: {},\n        flipped: !1,\n        offsets: {}\n      };\n      e.offsets.reference = L(this.state, this.popper, this.reference, this.options.positionFixed), e.placement = O(this.options.placement, e.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding), e.originalPlacement = e.placement, e.positionFixed = this.options.positionFixed, e.offsets.popper = C(this.popper, e.offsets.reference, e.placement), e.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute', e = P(this.modifiers, e), this.state.isCreated ? this.options.onUpdate(e) : (this.state.isCreated = !0, this.options.onCreate(e));\n    }\n  }\n\n  function W(e, t) {\n    return e.some(function (e) {\n      var o = e.name,\n          n = e.enabled;\n      return n && o === t;\n    });\n  }\n\n  function B(e) {\n    for (var t = [!1, 'ms', 'Webkit', 'Moz', 'O'], o = e.charAt(0).toUpperCase() + e.slice(1), n = 0; n < t.length; n++) {\n      var i = t[n],\n          r = i ? '' + i + o : e;\n      if ('undefined' != typeof document.body.style[r]) return r;\n    }\n\n    return null;\n  }\n\n  function H() {\n    return this.state.isDestroyed = !0, W(this.modifiers, 'applyStyle') && (this.popper.removeAttribute('x-placement'), this.popper.style.position = '', this.popper.style.top = '', this.popper.style.left = '', this.popper.style.right = '', this.popper.style.bottom = '', this.popper.style.willChange = '', this.popper.style[B('transform')] = ''), this.disableEventListeners(), this.options.removeOnDestroy && this.popper.parentNode.removeChild(this.popper), this;\n  }\n\n  function A(e) {\n    var t = e.ownerDocument;\n    return t ? t.defaultView : window;\n  }\n\n  function M(e, t, o, i) {\n    var r = 'BODY' === e.nodeName,\n        p = r ? e.ownerDocument.defaultView : e;\n    p.addEventListener(t, o, {\n      passive: !0\n    }), r || M(n(p.parentNode), t, o, i), i.push(p);\n  }\n\n  function F(e, t, o, i) {\n    o.updateBound = i, A(e).addEventListener('resize', o.updateBound, {\n      passive: !0\n    });\n    var r = n(e);\n    return M(r, 'scroll', o.updateBound, o.scrollParents), o.scrollElement = r, o.eventsEnabled = !0, o;\n  }\n\n  function I() {\n    this.state.eventsEnabled || (this.state = F(this.reference, this.options, this.state, this.scheduleUpdate));\n  }\n\n  function R(e, t) {\n    return A(e).removeEventListener('resize', t.updateBound), t.scrollParents.forEach(function (e) {\n      e.removeEventListener('scroll', t.updateBound);\n    }), t.updateBound = null, t.scrollParents = [], t.scrollElement = null, t.eventsEnabled = !1, t;\n  }\n\n  function U() {\n    this.state.eventsEnabled && (cancelAnimationFrame(this.scheduleUpdate), this.state = R(this.reference, this.state));\n  }\n\n  function Y(e) {\n    return '' !== e && !isNaN(parseFloat(e)) && isFinite(e);\n  }\n\n  function V(e, t) {\n    Object.keys(t).forEach(function (o) {\n      var n = '';\n      -1 !== ['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(o) && Y(t[o]) && (n = 'px'), e.style[o] = t[o] + n;\n    });\n  }\n\n  function j(e, t) {\n    Object.keys(t).forEach(function (o) {\n      var n = t[o];\n      !1 === n ? e.removeAttribute(o) : e.setAttribute(o, t[o]);\n    });\n  }\n\n  function q(e, t) {\n    var o = e.offsets,\n        n = o.popper,\n        i = o.reference,\n        r = $,\n        p = function (e) {\n      return e;\n    },\n        s = r(i.width),\n        d = r(n.width),\n        a = -1 !== ['left', 'right'].indexOf(e.placement),\n        l = -1 !== e.placement.indexOf('-'),\n        f = t ? a || l || s % 2 == d % 2 ? r : Z : p,\n        m = t ? r : p;\n\n    return {\n      left: f(1 == s % 2 && 1 == d % 2 && !l && t ? n.left - 1 : n.left),\n      top: m(n.top),\n      bottom: m(n.bottom),\n      right: f(n.right)\n    };\n  }\n\n  function K(e, t, o) {\n    var n = D(e, function (e) {\n      var o = e.name;\n      return o === t;\n    }),\n        i = !!n && e.some(function (e) {\n      return e.name === o && e.enabled && e.order < n.order;\n    });\n\n    if (!i) {\n      var r = '`' + t + '`';\n      console.warn('`' + o + '`' + ' modifier is required by ' + r + ' modifier in order to work, be sure to include it before ' + r + '!');\n    }\n\n    return i;\n  }\n\n  function z(e) {\n    return 'end' === e ? 'start' : 'start' === e ? 'end' : e;\n  }\n\n  function G(e) {\n    var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],\n        o = ce.indexOf(e),\n        n = ce.slice(o + 1).concat(ce.slice(0, o));\n    return t ? n.reverse() : n;\n  }\n\n  function _(e, t, o, n) {\n    var i = e.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/),\n        r = +i[1],\n        p = i[2];\n    if (!r) return e;\n\n    if (0 === p.indexOf('%')) {\n      var s;\n\n      switch (p) {\n        case '%p':\n          s = o;\n          break;\n\n        case '%':\n        case '%r':\n        default:\n          s = n;\n      }\n\n      var d = g(s);\n      return d[t] / 100 * r;\n    }\n\n    if ('vh' === p || 'vw' === p) {\n      var a;\n      return a = 'vh' === p ? ee(document.documentElement.clientHeight, window.innerHeight || 0) : ee(document.documentElement.clientWidth, window.innerWidth || 0), a / 100 * r;\n    }\n\n    return r;\n  }\n\n  function X(e, t, o, n) {\n    var i = [0, 0],\n        r = -1 !== ['right', 'left'].indexOf(n),\n        p = e.split(/(\\+|\\-)/).map(function (e) {\n      return e.trim();\n    }),\n        s = p.indexOf(D(p, function (e) {\n      return -1 !== e.search(/,|\\s/);\n    }));\n    p[s] && -1 === p[s].indexOf(',') && console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n    var d = /\\s*,\\s*|\\s+/,\n        a = -1 === s ? [p] : [p.slice(0, s).concat([p[s].split(d)[0]]), [p[s].split(d)[1]].concat(p.slice(s + 1))];\n    return a = a.map(function (e, n) {\n      var i = (1 === n ? !r : r) ? 'height' : 'width',\n          p = !1;\n      return e.reduce(function (e, t) {\n        return '' === e[e.length - 1] && -1 !== ['+', '-'].indexOf(t) ? (e[e.length - 1] = t, p = !0, e) : p ? (e[e.length - 1] += t, p = !1, e) : e.concat(t);\n      }, []).map(function (e) {\n        return _(e, i, t, o);\n      });\n    }), a.forEach(function (e, t) {\n      e.forEach(function (o, n) {\n        Y(o) && (i[t] += o * ('-' === e[n - 1] ? -1 : 1));\n      });\n    }), i;\n  }\n\n  function J(e, t) {\n    var o,\n        n = t.offset,\n        i = e.placement,\n        r = e.offsets,\n        p = r.popper,\n        s = r.reference,\n        d = i.split('-')[0];\n    return o = Y(+n) ? [+n, 0] : X(n, p, s, d), 'left' === d ? (p.top += o[0], p.left -= o[1]) : 'right' === d ? (p.top += o[0], p.left += o[1]) : 'top' === d ? (p.left += o[0], p.top -= o[1]) : 'bottom' === d && (p.left += o[0], p.top += o[1]), e.popper = p, e;\n  }\n\n  for (var Q = Math.min, Z = Math.floor, $ = Math.round, ee = Math.max, te = 'undefined' != typeof window && 'undefined' != typeof document, oe = ['Edge', 'Trident', 'Firefox'], ne = 0, ie = 0; ie < oe.length; ie += 1) if (te && 0 <= navigator.userAgent.indexOf(oe[ie])) {\n    ne = 1;\n    break;\n  }\n\n  var i = te && window.Promise,\n      re = i ? function (e) {\n    var t = !1;\n    return function () {\n      t || (t = !0, window.Promise.resolve().then(function () {\n        t = !1, e();\n      }));\n    };\n  } : function (e) {\n    var t = !1;\n    return function () {\n      t || (t = !0, setTimeout(function () {\n        t = !1, e();\n      }, ne));\n    };\n  },\n      pe = te && !!(window.MSInputMethodContext && document.documentMode),\n      se = te && /MSIE 10/.test(navigator.userAgent),\n      de = function (e, t) {\n    if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function');\n  },\n      ae = function () {\n    function e(e, t) {\n      for (var o, n = 0; n < t.length; n++) o = t[n], o.enumerable = o.enumerable || !1, o.configurable = !0, 'value' in o && (o.writable = !0), Object.defineProperty(e, o.key, o);\n    }\n\n    return function (t, o, n) {\n      return o && e(t.prototype, o), n && e(t, n), t;\n    };\n  }(),\n      le = function (e, t, o) {\n    return t in e ? Object.defineProperty(e, t, {\n      value: o,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : e[t] = o, e;\n  },\n      fe = Object.assign || function (e) {\n    for (var t, o = 1; o < arguments.length; o++) for (var n in t = arguments[o], t) Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);\n\n    return e;\n  },\n      me = te && /Firefox/i.test(navigator.userAgent),\n      he = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'],\n      ce = he.slice(3),\n      ge = {\n    FLIP: 'flip',\n    CLOCKWISE: 'clockwise',\n    COUNTERCLOCKWISE: 'counterclockwise'\n  },\n      ue = function () {\n    function t(o, n) {\n      var i = this,\n          r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};\n      de(this, t), this.scheduleUpdate = function () {\n        return requestAnimationFrame(i.update);\n      }, this.update = re(this.update.bind(this)), this.options = fe({}, t.Defaults, r), this.state = {\n        isDestroyed: !1,\n        isCreated: !1,\n        scrollParents: []\n      }, this.reference = o && o.jquery ? o[0] : o, this.popper = n && n.jquery ? n[0] : n, this.options.modifiers = {}, Object.keys(fe({}, t.Defaults.modifiers, r.modifiers)).forEach(function (e) {\n        i.options.modifiers[e] = fe({}, t.Defaults.modifiers[e] || {}, r.modifiers ? r.modifiers[e] : {});\n      }), this.modifiers = Object.keys(this.options.modifiers).map(function (e) {\n        return fe({\n          name: e\n        }, i.options.modifiers[e]);\n      }).sort(function (e, t) {\n        return e.order - t.order;\n      }), this.modifiers.forEach(function (t) {\n        t.enabled && e(t.onLoad) && t.onLoad(i.reference, i.popper, i.options, t, i.state);\n      }), this.update();\n      var p = this.options.eventsEnabled;\n      p && this.enableEventListeners(), this.state.eventsEnabled = p;\n    }\n\n    return ae(t, [{\n      key: 'update',\n      value: function () {\n        return k.call(this);\n      }\n    }, {\n      key: 'destroy',\n      value: function () {\n        return H.call(this);\n      }\n    }, {\n      key: 'enableEventListeners',\n      value: function () {\n        return I.call(this);\n      }\n    }, {\n      key: 'disableEventListeners',\n      value: function () {\n        return U.call(this);\n      }\n    }]), t;\n  }();\n\n  return ue.Utils = ('undefined' == typeof window ? global : window).PopperUtils, ue.placements = he, ue.Defaults = {\n    placement: 'bottom',\n    positionFixed: !1,\n    eventsEnabled: !0,\n    removeOnDestroy: !1,\n    onCreate: function () {},\n    onUpdate: function () {},\n    modifiers: {\n      shift: {\n        order: 100,\n        enabled: !0,\n        fn: function (e) {\n          var t = e.placement,\n              o = t.split('-')[0],\n              n = t.split('-')[1];\n\n          if (n) {\n            var i = e.offsets,\n                r = i.reference,\n                p = i.popper,\n                s = -1 !== ['bottom', 'top'].indexOf(o),\n                d = s ? 'left' : 'top',\n                a = s ? 'width' : 'height',\n                l = {\n              start: le({}, d, r[d]),\n              end: le({}, d, r[d] + r[a] - p[a])\n            };\n            e.offsets.popper = fe({}, p, l[n]);\n          }\n\n          return e;\n        }\n      },\n      offset: {\n        order: 200,\n        enabled: !0,\n        fn: J,\n        offset: 0\n      },\n      preventOverflow: {\n        order: 300,\n        enabled: !0,\n        fn: function (e, t) {\n          var o = t.boundariesElement || p(e.instance.popper);\n          e.instance.reference === o && (o = p(o));\n          var n = B('transform'),\n              i = e.instance.popper.style,\n              r = i.top,\n              s = i.left,\n              d = i[n];\n          i.top = '', i.left = '', i[n] = '';\n          var a = v(e.instance.popper, e.instance.reference, t.padding, o, e.positionFixed);\n          i.top = r, i.left = s, i[n] = d, t.boundaries = a;\n          var l = t.priority,\n              f = e.offsets.popper,\n              m = {\n            primary: function (e) {\n              var o = f[e];\n              return f[e] < a[e] && !t.escapeWithReference && (o = ee(f[e], a[e])), le({}, e, o);\n            },\n            secondary: function (e) {\n              var o = 'right' === e ? 'left' : 'top',\n                  n = f[o];\n              return f[e] > a[e] && !t.escapeWithReference && (n = Q(f[o], a[e] - ('right' === e ? f.width : f.height))), le({}, o, n);\n            }\n          };\n          return l.forEach(function (e) {\n            var t = -1 === ['left', 'top'].indexOf(e) ? 'secondary' : 'primary';\n            f = fe({}, f, m[t](e));\n          }), e.offsets.popper = f, e;\n        },\n        priority: ['left', 'right', 'top', 'bottom'],\n        padding: 5,\n        boundariesElement: 'scrollParent'\n      },\n      keepTogether: {\n        order: 400,\n        enabled: !0,\n        fn: function (e) {\n          var t = e.offsets,\n              o = t.popper,\n              n = t.reference,\n              i = e.placement.split('-')[0],\n              r = Z,\n              p = -1 !== ['top', 'bottom'].indexOf(i),\n              s = p ? 'right' : 'bottom',\n              d = p ? 'left' : 'top',\n              a = p ? 'width' : 'height';\n          return o[s] < r(n[d]) && (e.offsets.popper[d] = r(n[d]) - o[a]), o[d] > r(n[s]) && (e.offsets.popper[d] = r(n[s])), e;\n        }\n      },\n      arrow: {\n        order: 500,\n        enabled: !0,\n        fn: function (e, o) {\n          var n;\n          if (!K(e.instance.modifiers, 'arrow', 'keepTogether')) return e;\n          var i = o.element;\n\n          if ('string' == typeof i) {\n            if (i = e.instance.popper.querySelector(i), !i) return e;\n          } else if (!e.instance.popper.contains(i)) return console.warn('WARNING: `arrow.element` must be child of its popper element!'), e;\n\n          var r = e.placement.split('-')[0],\n              p = e.offsets,\n              s = p.popper,\n              d = p.reference,\n              a = -1 !== ['left', 'right'].indexOf(r),\n              l = a ? 'height' : 'width',\n              f = a ? 'Top' : 'Left',\n              m = f.toLowerCase(),\n              h = a ? 'left' : 'top',\n              c = a ? 'bottom' : 'right',\n              u = S(i)[l];\n          d[c] - u < s[m] && (e.offsets.popper[m] -= s[m] - (d[c] - u)), d[m] + u > s[c] && (e.offsets.popper[m] += d[m] + u - s[c]), e.offsets.popper = g(e.offsets.popper);\n          var b = d[m] + d[l] / 2 - u / 2,\n              w = t(e.instance.popper),\n              y = parseFloat(w['margin' + f], 10),\n              E = parseFloat(w['border' + f + 'Width'], 10),\n              v = b - e.offsets.popper[m] - y - E;\n          return v = ee(Q(s[l] - u, v), 0), e.arrowElement = i, e.offsets.arrow = (n = {}, le(n, m, $(v)), le(n, h, ''), n), e;\n        },\n        element: '[x-arrow]'\n      },\n      flip: {\n        order: 600,\n        enabled: !0,\n        fn: function (e, t) {\n          if (W(e.instance.modifiers, 'inner')) return e;\n          if (e.flipped && e.placement === e.originalPlacement) return e;\n          var o = v(e.instance.popper, e.instance.reference, t.padding, t.boundariesElement, e.positionFixed),\n              n = e.placement.split('-')[0],\n              i = T(n),\n              r = e.placement.split('-')[1] || '',\n              p = [];\n\n          switch (t.behavior) {\n            case ge.FLIP:\n              p = [n, i];\n              break;\n\n            case ge.CLOCKWISE:\n              p = G(n);\n              break;\n\n            case ge.COUNTERCLOCKWISE:\n              p = G(n, !0);\n              break;\n\n            default:\n              p = t.behavior;\n          }\n\n          return p.forEach(function (s, d) {\n            if (n !== s || p.length === d + 1) return e;\n            n = e.placement.split('-')[0], i = T(n);\n            var a = e.offsets.popper,\n                l = e.offsets.reference,\n                f = Z,\n                m = 'left' === n && f(a.right) > f(l.left) || 'right' === n && f(a.left) < f(l.right) || 'top' === n && f(a.bottom) > f(l.top) || 'bottom' === n && f(a.top) < f(l.bottom),\n                h = f(a.left) < f(o.left),\n                c = f(a.right) > f(o.right),\n                g = f(a.top) < f(o.top),\n                u = f(a.bottom) > f(o.bottom),\n                b = 'left' === n && h || 'right' === n && c || 'top' === n && g || 'bottom' === n && u,\n                w = -1 !== ['top', 'bottom'].indexOf(n),\n                y = !!t.flipVariations && (w && 'start' === r && h || w && 'end' === r && c || !w && 'start' === r && g || !w && 'end' === r && u),\n                E = !!t.flipVariationsByContent && (w && 'start' === r && c || w && 'end' === r && h || !w && 'start' === r && u || !w && 'end' === r && g),\n                v = y || E;\n            (m || b || v) && (e.flipped = !0, (m || b) && (n = p[d + 1]), v && (r = z(r)), e.placement = n + (r ? '-' + r : ''), e.offsets.popper = fe({}, e.offsets.popper, C(e.instance.popper, e.offsets.reference, e.placement)), e = P(e.instance.modifiers, e, 'flip'));\n          }), e;\n        },\n        behavior: 'flip',\n        padding: 5,\n        boundariesElement: 'viewport',\n        flipVariations: !1,\n        flipVariationsByContent: !1\n      },\n      inner: {\n        order: 700,\n        enabled: !1,\n        fn: function (e) {\n          var t = e.placement,\n              o = t.split('-')[0],\n              n = e.offsets,\n              i = n.popper,\n              r = n.reference,\n              p = -1 !== ['left', 'right'].indexOf(o),\n              s = -1 === ['top', 'left'].indexOf(o);\n          return i[p ? 'left' : 'top'] = r[o] - (s ? i[p ? 'width' : 'height'] : 0), e.placement = T(t), e.offsets.popper = g(i), e;\n        }\n      },\n      hide: {\n        order: 800,\n        enabled: !0,\n        fn: function (e) {\n          if (!K(e.instance.modifiers, 'hide', 'preventOverflow')) return e;\n          var t = e.offsets.reference,\n              o = D(e.instance.modifiers, function (e) {\n            return 'preventOverflow' === e.name;\n          }).boundaries;\n\n          if (t.bottom < o.top || t.left > o.right || t.top > o.bottom || t.right < o.left) {\n            if (!0 === e.hide) return e;\n            e.hide = !0, e.attributes['x-out-of-boundaries'] = '';\n          } else {\n            if (!1 === e.hide) return e;\n            e.hide = !1, e.attributes['x-out-of-boundaries'] = !1;\n          }\n\n          return e;\n        }\n      },\n      computeStyle: {\n        order: 850,\n        enabled: !0,\n        fn: function (e, t) {\n          var o = t.x,\n              n = t.y,\n              i = e.offsets.popper,\n              r = D(e.instance.modifiers, function (e) {\n            return 'applyStyle' === e.name;\n          }).gpuAcceleration;\n          void 0 !== r && console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n          var s,\n              d,\n              a = void 0 === r ? t.gpuAcceleration : r,\n              l = p(e.instance.popper),\n              f = u(l),\n              m = {\n            position: i.position\n          },\n              h = q(e, 2 > window.devicePixelRatio || !me),\n              c = 'bottom' === o ? 'top' : 'bottom',\n              g = 'right' === n ? 'left' : 'right',\n              b = B('transform');\n          if (d = 'bottom' == c ? 'HTML' === l.nodeName ? -l.clientHeight + h.bottom : -f.height + h.bottom : h.top, s = 'right' == g ? 'HTML' === l.nodeName ? -l.clientWidth + h.right : -f.width + h.right : h.left, a && b) m[b] = 'translate3d(' + s + 'px, ' + d + 'px, 0)', m[c] = 0, m[g] = 0, m.willChange = 'transform';else {\n            var w = 'bottom' == c ? -1 : 1,\n                y = 'right' == g ? -1 : 1;\n            m[c] = d * w, m[g] = s * y, m.willChange = c + ', ' + g;\n          }\n          var E = {\n            \"x-placement\": e.placement\n          };\n          return e.attributes = fe({}, E, e.attributes), e.styles = fe({}, m, e.styles), e.arrowStyles = fe({}, e.offsets.arrow, e.arrowStyles), e;\n        },\n        gpuAcceleration: !0,\n        x: 'bottom',\n        y: 'right'\n      },\n      applyStyle: {\n        order: 900,\n        enabled: !0,\n        fn: function (e) {\n          return V(e.instance.popper, e.styles), j(e.instance.popper, e.attributes), e.arrowElement && Object.keys(e.arrowStyles).length && V(e.arrowElement, e.arrowStyles), e;\n        },\n        onLoad: function (e, t, o, n, i) {\n          var r = L(i, t, e, o.positionFixed),\n              p = O(o.placement, r, t, e, o.modifiers.flip.boundariesElement, o.modifiers.flip.padding);\n          return t.setAttribute('x-placement', p), V(t, {\n            position: o.positionFixed ? 'fixed' : 'absolute'\n          }), o;\n        },\n        gpuAcceleration: void 0\n      }\n    }\n  }, ue;\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(16)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///100\n")},102:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, "setCSS", function() { return /* binding */ setCSS; });\n__webpack_require__.d(__webpack_exports__, "tooltipShown", function() { return /* binding */ tooltipShown; });\n__webpack_require__.d(__webpack_exports__, "phraseMarker", function() { return /* binding */ phraseMarker; });\n__webpack_require__.d(__webpack_exports__, "tooltips", function() { return /* binding */ tooltips; });\n\n// EXTERNAL MODULE: ./src/web/analytics/analytics.js\nvar analytics = __webpack_require__(1);\n\n// EXTERNAL MODULE: ./src/web/tooltip/mark.es6.min.js\nvar mark_es6_min = __webpack_require__(42);\nvar mark_es6_min_default = /*#__PURE__*/__webpack_require__.n(mark_es6_min);\n\n// EXTERNAL MODULE: ./src/web/tooltip/tippy.js\nvar tippy = __webpack_require__(12);\nvar tippy_default = /*#__PURE__*/__webpack_require__.n(tippy);\n\n// CONCATENATED MODULE: ./src/web/tooltip/styleAndStyleAssets.ts\nconst destinationIconLeft = `\n<svg\n    xmlns="http://www.w3.org/2000/svg"\n    viewBox="3 0 19 24"\n    fill="none"\n    stroke-width="2"\n    stroke-linecap="round"\n    stroke-linejoin="round"\n    class="amboss-card-article-icon"\n>\n    <rect x="4" y="2" width="16" height="20"></rect>\n    <line x1="16" y1="6" x2="8" y2="6"></line>\n    <line x1="14" y1="10" x2="8" y2="10"></line>\n    <rect x="8" y="14" width="8" height="4"></rect>\n</svg>\n`;\nconst destinationIconRight = `\n<svg\n    xmlns="http://www.w3.org/2000/svg"\n    viewBox="0 0 24 24"\n    fill="none"\n    stroke-width="2"\n    stroke-linecap="round"\n    stroke-linejoin="round"\n    class="amboss-card-article-icon"\n>\n    <line x1="5" y1="12" x2="19" y2="12"></line>\n    <polyline points="12 5 19 12 12 19"></polyline>\n</svg>\n`;\nconst notificationWarningIcon = `\n<svg\n  viewBox="0 0 19 19"\n  fill="none"\n  xmlns="http://www.w3.org/2000/svg"\n  class="amboss-card-server-notification-warning-icon"\n>\n  <path\n    fill-rule="evenodd"\n    clip-rule="evenodd"\n    d="M8.14624 3.8475L1.44082 15.0417C1.15949 15.5289 1.15781 16.1287 1.43641 16.6175C1.715 17.1063 2.23202 17.4105 2.79457 17.4167H16.2054C16.768 17.4105 17.285 17.1063 17.5636 16.6175C17.8422 16.1287 17.8405 15.5289 17.5592 15.0417L10.8537 3.8475C10.5667 3.37431 10.0534 3.08533 9.49999 3.08533C8.94654 3.08533 8.43327 3.37431 8.14624 3.8475Z"\n    stroke="white"\n    stroke-width="2"\n    stroke-linecap="round"\n    stroke-linejoin="round"\n  />\n  <path\n    d="M9.5 7.91666V11.0833"\n    stroke="white"\n    stroke-width="2"\n    stroke-linecap="round"\n    stroke-linejoin="round"\n  />\n  <rect x="8.70837" y="13.4583" width="1.58333" height="1.58333" rx="0.791667" fill="white" />\n</svg>\n`;\nconst tooltipStyles = `\n<style>    \n    .amboss-card, .amboss-card * {\n      text-align: left;\n      text-decoration: initial;\n      background-color: initial;\n      font-variant: initial;\n      color: initial;\n      font-size: initial;\n      color: #303438;\n      font-family: Lato, -apple-system, BlinkMacSystemFont, \'segoe ui\', \'avenir next\', avenir, \'helvetica neue\', helvetica,\n      ubuntu, roboto, noto, arial, sans-serif;\n      font-feature-settings: \'lnum\', \'pnum\', \'kern\', \'liga\', \'clig\';\n      -webkit-font-smoothing: antialiased;\n      font-style: normal;\n      font-weight: 400;\n      max-width: 600px;\n      user-select: text;\n    }\n\n    .amboss-register-link {\n      text-decoration: underline;\n    }\n\n    .amboss-card {\n      background-color: white;\n    }\n    \n    .amboss-card-header {\n      margin-bottom: 1.1em;\n    }\n    \n    .amboss-card-title {\n      font-size: 1.4em;\n      font-weight: bold;\n      margin-top: 0.5em;\n      margin-bottom: 0;\n      padding-top: 0;\n    }\n    \n    .amboss-card-subtitles {\n      font-size: 1.1em;\n      margin-top: 0.3em;\n      line-height: 2em;\n      margin-bottom: 1.1em;\n    }\n    \n    .amboss-card-subtitles:last-child {\n      margin-bottom: 1.1em;\n    }\n    \n    .amboss-synonyms, .amboss-translation {\n      font-size: 1.1em;\n      line-height: 1.4em;\n    }\n    \n    .amboss-synonyms {\n      font-style: italic;\n    }\n    \n    .amboss-translation {\n      color: rgb(106, 136, 154);\n    }\n    \n    .amboss-abstract {\n      font-size: 1.1em;\n      margin-bottom: 1.1em;\n      line-height: 1.4em;\n      color: #51616d;\n    }\n    \n    /* DESTINATION START */\n    .amboss-destinations {\n        flex-direction: column;\n        display: flex;\n        margin-left: -20px;\n        margin-right: -20px;\n    }\n    \n    .amboss-destination-container {\n        display: flex;\n        align-items: center;\n        padding: 1em;\n        border-top: 1px solid #DCE4E8;\n    }\n    \n    .amboss-destination-container:hover {\n      background-color: #f9fafb;\n    }\n    \n    .amboss-destination-container:hover .amboss-destination-icon-left {\n      stroke: #0099ab;\n    }\n    \n    .amboss-destination-container:hover .amboss-destination-text {\n      color: #51616d;\n      text-decoration: underline #c0c8cc;\n    }\n    \n    .amboss-destination-icon-left, .amboss-destination-icon-right {\n      stroke: #9daebb;\n      width: 25px;\n      height: auto;\n    }\n    \n    .amboss-destination-icon-right {\n      position: absolute;\n      right: 1rem;\n    }\n    \n    .amboss-destination-text {\n      padding-left: 12px;\n      font-size: 1.1em;\n      line-height: 1.2em;\n      color: #303438;\n      max-width: calc(100% - 50px - 28px);\n    }\n    /* DESTINATION END */\n    \n    .amboss-card-article-icon {\n      vertical-align: middle;\n      width: initial;\n    }\n    \n    .amboss-notification {\n      padding-bottom: 1.1em;\n    }\n    \n    @keyframes amboss-load-animation {\n      to {\n        stroke-dashoffset: 136;\n      }\n    }\n    \n    .amboss-load {\n      stroke: rgb(22, 190, 157);\n      animation: 2s linear 0s infinite normal none running amboss-load-animation;\n      stroke-dasharray: 17px;\n    }\n    /* FOOTER START */\n    .amboss-card-footer {\n        border-top: 1px solid #DCE4E8;\n        padding-top: 20px;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        margin-right: -20px;\n        margin-left: -20px;\n        padding-right: 20px;\n        padding-left: 20px;\n    }\n    \n    .amboss-card-version-info {\n      color: #eb5e64;\n      font-size: 0.8em;\n      font-weight: bold;\n    }\n    \n    .amboss-footer-link {\n      font-size: .8em;\n      font-weight: bold;\n      color: #9daebb;\n      text-decoration: underline;\n    }\n    \n    .amboss-footer-link:hover {\n      color: #51616d;\n    }\n    \n    .amboss-footer-logo {\n      height: 16px;\n      max-width: 100%;\n      max-height: 100%;\n    }\n    \n    /* MEDIA START */\n    \n    .amboss-tooltip-media-wrapper {\n      display: flex;\n    }\n    \n    .thumbnails-container {\n      text-align: center;\n      width: 80px;\n      height: 250px;\n      border-right-color: lightgrey;\n      border-right-style: solid;\n      border-right-width: 1px;\n    }\n    \n    .thumbnail-image-wrapper {\n        display: block;\n        text-align: center;\n        height: 36px;\n        width: 64px;\n        overflow: hidden;\n        margin-top: 8px;\n        border-radius: 8px;\n        border-color: lightgrey;\n        border-style: solid;\n        border-width: 1px;\n    }\n    \n    .thumbnail-image {\n      max-height: 36px;\n    }\n    \n    .thumbnail-image-wrapper:hover:not(.thumbnail-active) {\n      border-color: darkgrey;\n    }\n    \n    .thumbnail-image-wrapper:active {\n      border-color: grey;\n    }\n    \n    .thumbnail-active {\n      border-color: grey;\n    }\n    \n    .main-image-container {\n      flex: auto;\n      text-align: center;\n      width: 500px;\n      height: 300px;\n    }\n    \n    .main-image-wrapper {\n      display: block;\n      text-align: center;\n      height: 100% !important;\n      width: 100% !important;\n      // cursor: crosshair;\n    }\n    \n    .main-image {\n      height: auto !important;\n      width: auto !important;\n      max-height: 85% !important;\n      max-width: 80% !important;\n      margin: 8px;\n      margin-bottom: 0;\n    }\n    \n    .main-image-wrapper h5 {\n      margin: 0;\n      text-align: center;\n      color: #51616d;\n    }\n    \n    /******************  WARNINGS AND PLACEHOLDER  ******************/\n    .amboss-card-placeholder {\n      padding: 1em;\n      text-align: center;\n    }\n    \n    .amboss-card-server-notification {\n      padding-top: 1em;\n      padding-bottom: 0.5em;\n    }\n    \n    .amboss-card-server-notification-warning {\n      background: #F1D56B;\n      border-radius: 3.06853px;\n      padding: 1em 0.7em;\n      color: white;\n      display: flex;\n      align-items: center;\n      line-height: 1.2em;\n      font-weight: bold;\n    }\n    \n    .amboss-card-server-notification-warning-icon {\n      padding-right: 0.5em;\n      width: 32px;\n    }\n    \n    .amboss-card-client-notification {\n      padding: 0 1em 1em;\n      line-height: 1.5em;\n      text-align: center;\n    }\n    \n    .amboss-card-client-notification-error {\n      color: red;\n    }\n    \n    .amboss-card-client-notification-access-expired {\n      text-align: left;\n    }\n    \n    .amboss-card-client-notification-access-expired-header {\n      font-weight: bold;\n    }\n</style>\n`;\nconst placeholder = `\n<div id="amboss-card-placeholder" class="amboss-card-placeholder">\n    <svg id="triangle" width="100" height="100" viewBox="-3 -4 39 39" class="container-2420473442">\n      <polygon fill="transparent" stroke-width="1" points="16,0 32,32 0,32" class="amboss-load"></polygon>\n    </svg>\n</div>\n`;\n// CONCATENATED MODULE: ./src/web/tooltip/AmbossTooltipContent.ts\n// @ts-ignore\n\n\n\nclass AmbossTooltipContent_AmbossTooltipContent extends HTMLElement {\n  constructor() {\n    super();\n    this.attachShadow({\n      mode: \'open\'\n    });\n    this.images = [];\n    this.currentImageIndex = 0;\n  }\n\n  handleMainImageClicked() {\n    const pycmdArg = `amboss:reviewer:media:${JSON.stringify(this.currentImage)}`; // @ts-ignore\n\n    pycmd(pycmdArg);\n    Object(analytics["track"])(\'tooltip_main_image_clicked\', this.currentImage);\n    return false;\n  }\n\n  updateThumbnails(element, index) {\n    if (!this.shadowRoot || !this.images || !element) return;\n    this.currentImageIndex = index;\n    const mainWrapper = this.shadowRoot.querySelector(\'.main-image-wrapper\');\n    if (!mainWrapper || !mainWrapper.firstElementChild) return;\n    this.shadowRoot.querySelectorAll(\'.thumbnail-image-wrapper.thumbnail-active\').forEach(element => element.classList.remove(\'thumbnail-active\'));\n    element.classList.add(\'thumbnail-active\');\n    mainWrapper.firstElementChild.setAttribute(\'src\', this.currentImage.media_url);\n    return;\n  }\n\n  get currentImage() {\n    return this.images.length >= this.currentImageIndex ? this.images[this.currentImageIndex] : {\n      id: \'\',\n      media_url: \'\',\n      media_copyright: \'\',\n      url_with_access: \'\',\n      url_without_access: \'\'\n    };\n  }\n\n  connectedCallback() {\n    if (this.shadowRoot === null) return;\n    const propsAttr = this.getAttribute(\'props\') || \'\';\n    const props = JSON.parse(propsAttr);\n    const {\n      serverNotification,\n      title,\n      synonyms = [],\n      translation,\n      media = [],\n      mainImageCaption,\n      clientNotification,\n      abstract,\n      destinations = [],\n      bottomBarHelpLink,\n      bottomBarAmbossLink,\n      feedbackText,\n      footerImgUrl,\n      loading\n    } = props;\n    this.images = media.filter(Boolean).length > 0 ? media : [];\n    const serverNotificationUI = serverNotification ? `<div class="amboss-card-server-notification">\n                  <div class="amboss-card-server-notification-warning">\n                    ${notificationWarningIcon}\n                    <div class="amboss-card-server-notification-text">${serverNotification}</div>\n                  </div>\n                </div>` : \'\';\n    const titleUI = title ? `<div class="amboss-card-title amboss-header" data-e2e-test-id="header">${title}</div>` : \'\';\n    const synonymsUI = synonyms.length ? `<div class="amboss-synonyms" data-e2e-test-id="synonyms">${synonyms.join(\', \')}</div>` : \'\';\n    const translationUI = translation ? `<div class="amboss-translation" data-e2e-test-id="translation">${translation}</div>` : \'\';\n    const mediaUI = this.images.length > 0 ? `<div class="amboss-tooltip-media-wrapper">\n            ${this.images.length > 1 ? `\n              <div class="thumbnails-container">\n                ${media.map((m, index) => `\n                  <a\n                  class="${this.currentImageIndex === index ? \'thumbnail-image-wrapper thumbnail-active\' : \'thumbnail-image-wrapper\'}"\n                  data-e2e-test-id="${this.currentImageIndex === index ? \'image-thumbnail-active\' : \'image-thumbnail\'}"\n                  href="#"\n                  >\n                    <img\n                      src="${m.media_url}"\n                      alt="alt text"\n                      class="thumbnail-image"\n                    />\n                  </a>`).join(\'\')}\n              </div>` : \'\'}\n          <div class=\'main-image-container\'>\n            <a href="#" class="main-image-wrapper" data-e2e-test-id="image-main">\n                <img\n                    src="${this.currentImage.media_url}"\n                    alt="alt text"\n                    class="main-image"\n                >\n                <h5>${mainImageCaption}</h5>\n            </a>\n          </div>\n          </div>` : \'\';\n    const clientNotificationUI = clientNotification ? `<div class="amboss-card-client-notification">${clientNotification}</div>` : \'\';\n    const abstractUI = abstract ? `<div class="amboss-abstract" data-e2e-test-id="abstract">${abstract}</div>` : \'\'; // NOTE: Please make sure to keep "amboss-destination-container" in sync with\n    // tooltip.ts as destination click tracking otherwise breaks\n\n    const destinationsUI = destinations.length > 0 ? `<div class="amboss-destinations">${destinations.map(d => {\n      const {\n        pycmdUrl,\n        phraseTerm,\n        anchorId,\n        articleId,\n        articleAccessTargetType,\n        cardGuid,\n        destinationText\n      } = d;\n      return `\n            <a\n          href=#\n          onclick="return pycmd(\'amboss:reviewer:url:${pycmdUrl}\');"\n          class="amboss-destination-container"\n          data-phrase-term="${phraseTerm}"\n          data-anchor-id="${anchorId}"\n          data-article-id="${articleId}"\n          data-article-access-target-type="${articleAccessTargetType}"\n          data-card-guid="${cardGuid}"\n          data-e2e-test-id="action-destination"\n        >\n            <div class="amboss-destination-icon-left">\n              ${destinationIconLeft}\n            </div>\n            <div class="amboss-destination-text">\n              ${destinationText}\n            </div>\n            <div class="amboss-destination-icon-right">\n              ${destinationIconRight}\n            </div>\n        </a>`;\n    }).join(\'\')}</div>` : \'\';\n    const footerUI = `<div class="amboss-card-footer">\n          <a href="${bottomBarAmbossLink}">\n            <img class="amboss-base-img amboss-footer-logo" src="${footerImgUrl}" />\n          </a>\n          <div class="amboss-card-version-info"></div>\n          <a class="amboss-footer-link" href="${bottomBarHelpLink}">\n            ${feedbackText}\n          </a>\n        </div>`;\n    this.shadowRoot.innerHTML = `\n        ${tooltipStyles}\n        <div id="amboss-card" class="amboss-card" data-e2e-test-id="amboss-card">\n            <div class="amboss-card-body">\n                ${loading ? placeholder : `<div class="amboss-card-header">\n                                ${serverNotificationUI}\n                                ${titleUI}\n                                <div class="amboss-card-subtitles">\n                                    ${synonymsUI}\n                                    ${translationUI}\n                                </div>\n                            </div>\n                            ${mediaUI}\n                            ${clientNotificationUI}\n                            ${abstractUI}\n                            ${destinationsUI}\n                            ${footerUI}\n                `}\n            </div>\n        </div>\n    `;\n    this.shadowRoot.querySelectorAll(\'.thumbnail-image-wrapper\').forEach((element, index) => {\n      if (index === 0) this.updateThumbnails(element, index);\n      element.addEventListener(\'click\', () => {\n        this.updateThumbnails(element, index);\n        Object(analytics["track"])(\'tooltip_thumbnail_clicked\', this.images[index]);\n      });\n    });\n    const mainWrapper = this.shadowRoot.querySelector(\'.main-image-wrapper\');\n\n    if (mainWrapper && mainWrapper.firstElementChild) {\n      mainWrapper.addEventListener(\'click\', () => {\n        this.handleMainImageClicked();\n      });\n      mainWrapper.firstElementChild.setAttribute(\'src\', this.currentImage.media_url);\n    }\n  }\n\n}\n\n/* harmony default export */ var tooltip_AmbossTooltipContent = (AmbossTooltipContent_AmbossTooltipContent);\n// CONCATENATED MODULE: ./src/web/tooltip/tooltip.ts\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// @ts-ignore\n // @ts-ignore\n\n // @ts-ignore\n\n // import \'../popper.js\'\n\n\n// lookbehind assertions were introduced to Chrome in version 62: https://www.chromestatus.com/feature/5668726032564224\nconst chromeVersionMatch = navigator.appVersion && navigator.appVersion.match(/.*Chrome\\/([0-9]+)/);\nconst hasLookbehind = !(chromeVersionMatch && chromeVersionMatch.length > 1 && parseInt(chromeVersionMatch[1]) && parseInt(chromeVersionMatch[1]) < 62); //  ### Hooks ###\n// based on anki.hooks.wrap\n\nfunction wrap(oldFct, newFct, pos = \'after\') {\n  function repl(...args) {\n    if (pos === \'after\') {\n      oldFct(...args);\n      return newFct(...args);\n    } else if (pos === \'before\') {\n      newFct(...args);\n      return oldFct(...args);\n    } else {\n      // don\'t wrap at all\n      return newFct(...args);\n    }\n  }\n\n  return repl;\n} // ### Highlights ###\n\n\nconst ambossDynamicStyleId = \'ambossDynamicStyle\';\nconst setCSS = rule => {\n  let styleElement = document.getElementById(ambossDynamicStyleId);\n\n  if (!styleElement) {\n    styleElement = document.createElement(\'style\');\n    styleElement.id = ambossDynamicStyleId;\n    document.body.appendChild(styleElement);\n  }\n\n  styleElement.innerHTML = rule;\n}; // Determine which text nodes should be marked and in what way\n\nclass TextNodeFilter {\n  constructor() {\n    this.textBuffer = \'\';\n    this.markerType = \'single\';\n  }\n\n  initialize() {\n    this.textBuffer = \'\';\n    this.markerType = \'single\';\n  }\n\n  filter(textNode, foundTerm, final) {\n    if (!textNode || !textNode.parentElement || !textNode.textContent) return false; // Prevent multiple markers\n\n    if (textNode.parentElement.hasAttribute(\'data-phrase-id\')) {\n      return false;\n    } // Composite phrases: Identify fragment position and set CSS accordingly\n\n\n    const text = textNode.textContent;\n    const termIncluded = text.toLowerCase().includes(foundTerm.toLowerCase());\n\n    if (!this.textBuffer && termIncluded) {\n      this.markerType = \'single\';\n    } else if (!this.textBuffer && !termIncluded) {\n      this.textBuffer += text;\n      this.markerType = \'start\';\n    } else if (this.textBuffer && !termIncluded) {\n      this.textBuffer += text;\n\n      if (this.textBuffer.includes(foundTerm)) {\n        this.textBuffer = \'\';\n        this.markerType = \'end\';\n      } else {\n        this.markerType = \'middle\';\n      }\n    } else {\n      this.markerType = \'single\';\n      this.textBuffer = \'\';\n    }\n\n    return true;\n  }\n\n}\n\nclass tooltip_PhraseMarker {\n  constructor(cardSelector, markClass, textNodeFilter) {\n    this.card = document.querySelector(cardSelector);\n    this.markClass = markClass;\n    this.textNodeFilter = textNodeFilter;\n    this.marker = null;\n  }\n\n  hideAll() {\n    if (!this.marker) {\n      return false;\n    }\n\n    this.marker.unmark({\n      className: this.markClass\n    });\n  }\n\n  mark(phrases) {\n    // Workaround:\n    // Anki might still be loading in new card content when mark() fires, so\n    // we defer marking until the qa element is ready\n    if (typeof _updatingQA !== \'undefined\' && _updatingQA) {\n      setTimeout(() => this.mark(phrases), 50);\n    } else if (typeof _queueAction != \'undefined\') {\n      _queueAction(() => new Promise(resolve => {\n        this._mark(phrases);\n\n        resolve();\n      }));\n    } else {\n      this._mark(phrases);\n    }\n  }\n\n  _mark(phrases) {\n    this._spacifyParagraphs(this.card);\n\n    if (!this.marker) {\n      this.marker = new mark_es6_min_default.a(this.card);\n    }\n\n    let markId = 0; // Object.values(phrases).forEach((term) => {\n\n    for (const term in phrases) {\n      this.textNodeFilter.initialize();\n\n      const termRegex = this._composeTermRegex(term); // FIXME:\n      // We should switch back to mark() as soon as the hyphen workaround is\n      // no longer needed (see _composeTermRegex)\n\n\n      this.marker.markRegExp(termRegex, {\n        element: \'span\',\n        className: this.markClass,\n        separateWordSearch: false,\n        acrossElements: true,\n        filter: (textNode, foundTerm, markCounter) => {\n          return this.textNodeFilter.filter(textNode, foundTerm, markCounter);\n        },\n        each: node => {\n          node.setAttribute(\'data-phrase-id\', phrases[term]);\n          node.setAttribute(\'data-phrase-term\', term);\n          node.setAttribute(\'data-e2e-test-id\', "amboss-marker");\n          node.id = `mark-${++markId}`;\n          node.classList.add(`${this.markClass}-${textNodeFilter.markerType}`);\n        }\n      });\n    }\n  } // Workaround:\n  // We match across elements to support partial formatting within phrases.\n  // However, that configuration also prompts mark.js to ignore paragraph-like\n  // boundaries (e.g. div, p, br or li) as word separators.\n  // As a workaround we temporarily surround all pertinent tags with spaces.\n  // This is ugly, but currently the only way to both match across elements and\n  // delimit matches by paragraphs (cf. https://github.com/julmot/mark.js/issues/127)\n\n\n  _spacifyParagraphs(parent) {\n    const elements = parent ? Array.from(parent.querySelectorAll(\'div, p, br, li\')) : [];\n    elements.forEach(elm => {\n      elm.insertAdjacentHTML(\'beforebegin\', \' \');\n      elm.insertAdjacentHTML(\'afterend\', \' \');\n    });\n  } // Workaround:\n  // API sometimes returns spaces for hyphens, so treat hyphens like whitespace.\n  // Additionally escapes reserved regex characters in term.\n  // Add word boundaries.\n\n\n  _composeTermRegex(term) {\n    return new RegExp((hasLookbehind ? \'(?<=[\\\\s,.:;"\\\'?!\\\\[\\\\(/]|^)\' : \'\\\\b\') + term.replace(/[.*+?^${}()|[\\]\\\\]/g, \'\\\\$&\').replace(/ /g, \'[ -‐‑−]\') + \'(?=[\\\\s,.:;"\\\'?!\\\\]\\\\)/]|$)\', \'gmi\');\n  }\n\n} // ### Tooltips ###\n\n\nclass tooltip_TooltipManager {\n  constructor(selector, markClass) {\n    this.selector = selector;\n    this.markClass = markClass;\n    this.lastPhraseId = null;\n    this.tooltipVisible = false;\n    this.startShowTooltip = 0;\n    this.tippyOptions = {\n      content: `<amboss-tooltip-content props=\'{"loading": true}\'/>`,\n      animateFill: false,\n      animation: \'shift-away\',\n      theme: \'light amboss\',\n      arrow: true,\n      interactive: true,\n      interactiveDebounce: 100,\n      flipOnUpdate: true,\n      onShow: tippyInstance => {\n        this.startShowTooltip = Date.now();\n        this.hideAll();\n\n        this._getAbstractFor(tippyInstance.reference);\n\n        this.tooltipVisible = true;\n        this.lastPhraseId = tippyInstance.reference.getAttribute(\'data-phrase-id\');\n      }\n    };\n  }\n\n  initialize() {\n    // adjust tippy options for event delegation\n    const delegatedTippyOptions = Object.assign(this.tippyOptions, {\n      target: `.${this.markClass}`,\n      // tooltips created through event delegation do not need to be destroyed:\n      onHidden: tippyInstance => {\n        Object(analytics["track"])(\'tooltip.hidden\', {\n          phraseId: tippyInstance.reference.getAttribute(\'data-phrase-id\'),\n          shownForMilliseconds: Date.now() - this.startShowTooltip\n        });\n        this.tooltipVisible = false;\n        tippyInstance.setContent(`<amboss-tooltip-content props=\'{"loading": true}\'/>`);\n      }\n    });\n\n    tippy_default()(this.selector, delegatedTippyOptions);\n  }\n\n  hideAll() {\n    tippy_default.a.hideAll({\n      duration: 0\n    });\n  }\n\n  onShowQuestion() {\n    // new card, reset all\n    this.hideAll();\n    this.tooltipVisible = false;\n    this.lastPhraseId = null;\n  }\n\n  onShowAnswer() {\n    // same card, answer side\n    this.hideAll();\n  }\n\n  rotateTooltips(backward = false, lastPhraseId = this.lastPhraseId) {\n    const markedElementsHTMLCollection = document.getElementsByClassName(this.markClass);\n    const markedElementsArray = Array.from(markedElementsHTMLCollection).filter(el => !(el instanceof SVGElement));\n    const uniquePhraseIds = [];\n    const uniqueMarkedElements = markedElementsArray.reduce((acc, cur) => {\n      if (!this._isVisible(cur)) return acc;\n      const phraseId = cur.dataset.phraseId || \'\';\n\n      if (phraseId && !acc[phraseId]) {\n        if (!uniquePhraseIds.some(i => i === phraseId)) uniquePhraseIds.push(phraseId);\n        return _objectSpread(_objectSpread({}, acc), {}, {\n          [phraseId]: cur\n        });\n      }\n\n      return acc;\n    }, {});\n\n    if (uniquePhraseIds.length === 1 && this.tooltipVisible) {\n      // Do not hide & reshow tooltip when the one existing tooltip is already visible\n      return uniquePhraseIds[0];\n    }\n\n    let targetPhraseId; // On hidden phrases, return to the previously shown phrase or the first one,\n    // regardless of keystroke pushed;\n    // On visible phrase, go either forward or backward, depending on `backward` value\n    // On initial rotation, if forward, go to first visible phrase\n    // On initial rotation, if backward, go to last visible phrase\n\n    if (lastPhraseId && !this.tooltipVisible) {\n      targetPhraseId = lastPhraseId;\n    } else if (lastPhraseId !== null) {\n      const lastPhraseIdx = uniquePhraseIds.indexOf(lastPhraseId);\n      const nextPhraseIdx = (lastPhraseIdx + (backward ? -1 : 1)) % uniquePhraseIds.length;\n      targetPhraseId = uniquePhraseIds.slice(nextPhraseIdx)[0];\n    } else {\n      const nextPhraseIdx = backward ? -1 : 0;\n      targetPhraseId = uniquePhraseIds.slice(nextPhraseIdx)[0];\n    } // @ts-ignore\n\n\n    this.showTooltipOnElement(uniqueMarkedElements[targetPhraseId]);\n    Object(analytics["track"])(\'tooltip.rotate\', {\n      direction: backward ? \'backward\' : \'forward\'\n    });\n    return targetPhraseId;\n  }\n\n  showTooltipOnElement(element) {\n    if (!element) {\n      return false;\n    }\n\n    if (element._tippy) {\n      element._tippy.show();\n    } else {\n      // this is called when accessing tooltips via shift+f\n      const tip = this._createTippyOnElement(element);\n\n      tip.show();\n    }\n  }\n\n  _createTippyOnElement(element) {\n    // adjust tippy options for programmatically created tooltips\n    const invokedTippyOptions = Object.assign(this.tippyOptions, {\n      // tooltips need to destroyed on hiding in order for tooltips\n      // created through event delegation to continue working\n      onHidden: tippyInstance => {\n        this.tooltipVisible = false;\n        tippyInstance.destroy();\n      }\n    });\n    return tippy_default()(element, invokedTippyOptions);\n  }\n\n  setContentFor(markId, html, hasMedia) {\n    var _document$querySelect, _document$querySelect2;\n\n    const markElm = document.getElementById(markId);\n\n    if (!markElm || !markElm._tippy) {\n      // card content updated or tippy instance already destroyed (i.e. focus\n      // moved to next marked phrase)\n      return false;\n    }\n\n    const tippyInstance = markElm._tippy;\n    const tooltipElm = markElm._tippy.popperChildren.tooltip;\n    tooltipElm.classList.add(\'tippy-tooltip-loaded\');\n\n    if (hasMedia) {\n      tooltipElm.classList.add(\'tippy-tooltip-media\');\n    }\n\n    tippyInstance.setContent(html);\n    let destinationViewer = \'unknown\'; // @ts-ignore\n\n    pycmd(`amboss:reviewer:isArticleViewerInternal:`, function (isInternal) {\n      if (isInternal === true) {\n        destinationViewer = \'internal\';\n      } else if (isInternal === false) {\n        destinationViewer = \'external\';\n      }\n    });\n    (_document$querySelect = document.querySelector(\'amboss-tooltip-content\')) === null || _document$querySelect === void 0 ? void 0 : (_document$querySelect2 = _document$querySelect.shadowRoot) === null || _document$querySelect2 === void 0 ? void 0 : _document$querySelect2.querySelectorAll(\'a.amboss-destination-container\').forEach(element => {\n      element.addEventListener(\'click\', event => {\n        Object(analytics["track"])(\'tooltip.destination.opened\', {\n          term: element.getAttribute(\'data-phrase-term\'),\n          anchor: element.getAttribute(\'data-anchor-id\'),\n          learningCardId: element.getAttribute(\'data-article-id\'),\n          learningCardAccessTargetType: element.getAttribute(\'data-article-access-target-type\'),\n          guid: element.getAttribute(\'data-card-guid\'),\n          destinationViewer: destinationViewer\n        });\n      });\n    });\n  }\n\n  _getAbstractFor(referenceElm) {\n    const payload = {\n      phraseId: referenceElm.getAttribute(\'data-phrase-id\'),\n      term: referenceElm.getAttribute(\'data-phrase-term\'),\n      markId: referenceElm.id\n    }; // @ts-ignore\n\n    pycmd(`amboss:reviewer:tooltip:${JSON.stringify(payload)}`);\n  }\n\n  _isVisible(element) {\n    return element.offsetWidth > 0 && element.offsetHeight > 0 && element.getClientRects().length > 0 && getComputedStyle(element).visibility !== \'hidden\';\n  }\n\n}\n\nconst tooltipShown = (phraseId, term, accessError, rateLimit) => {\n  Object(analytics["track"])(\'tooltip.shown\', {\n    phraseId,\n    term,\n    access_error: accessError,\n    rate_limit: rateLimit\n  });\n}; // ### Main ###\n\nconst cardSelector = \'#qa\';\nconst markClass = \'amboss-marker\';\nconst textNodeFilter = new TextNodeFilter();\nconst phraseMarker = new tooltip_PhraseMarker(cardSelector, markClass, textNodeFilter);\nconst tooltips = new tooltip_TooltipManager(cardSelector, markClass);\nwindow._showQuestion = wrap(window._showQuestion, () => tooltips.onShowQuestion(), \'before\');\nwindow._showAnswer = wrap(window._showAnswer, () => tooltips.onShowAnswer(), \'before\');\nwindow._showAnswer = wrap(window._showAnswer, tooltips.hideAll, \'before\');\nwindow.setTimeout(() => tooltips.initialize(), 50);\ncustomElements.define(\'amboss-tooltip-content\', tooltip_AmbossTooltipContent);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///102\n')},12:function(module,exports,__webpack_require__){eval('!function (t, e) {\n   true ? module.exports = e(__webpack_require__(100)) : undefined;\n}(this, function (t) {\n  "use strict";\n\n  t = t && t.hasOwnProperty("default") ? t.default : t;\n\n  function e() {\n    return (e = Object.assign || function (t) {\n      for (var e = 1; e < arguments.length; e++) {\n        var a = arguments[e];\n\n        for (var r in a) Object.prototype.hasOwnProperty.call(a, r) && (t[r] = a[r]);\n      }\n\n      return t;\n    }).apply(this, arguments);\n  }\n\n  var a = "undefined" != typeof window && "undefined" != typeof document,\n      r = a ? navigator.userAgent : "",\n      n = /MSIE |Trident\\//.test(r),\n      i = /UCBrowser\\//.test(r),\n      o = a && /iPhone|iPad|iPod/.test(navigator.platform) && !window.MSStream,\n      p = {\n    a11y: !0,\n    allowHTML: !0,\n    animateFill: !0,\n    animation: "shift-away",\n    appendTo: function () {\n      return document.body;\n    },\n    aria: "describedby",\n    arrow: !1,\n    arrowType: "sharp",\n    boundary: "scrollParent",\n    content: "",\n    delay: 0,\n    distance: 10,\n    duration: [325, 275],\n    flip: !0,\n    flipBehavior: "flip",\n    flipOnUpdate: !1,\n    followCursor: !1,\n    hideOnClick: !0,\n    ignoreAttributes: !1,\n    inertia: !1,\n    interactive: !1,\n    interactiveBorder: 2,\n    interactiveDebounce: 0,\n    lazy: !0,\n    maxWidth: 350,\n    multiple: !1,\n    offset: 0,\n    onHidden: function () {},\n    onHide: function () {},\n    onMount: function () {},\n    onShow: function () {},\n    onShown: function () {},\n    onTrigger: function () {},\n    placement: "top",\n    popperOptions: {},\n    role: "tooltip",\n    showOnInit: !1,\n    size: "regular",\n    sticky: !1,\n    target: "",\n    theme: "dark",\n    touch: !0,\n    touchHold: !1,\n    trigger: "mouseenter focus",\n    triggerTarget: null,\n    updateDuration: 0,\n    wait: null,\n    zIndex: 9999\n  },\n      s = ["arrow", "arrowType", "boundary", "distance", "flip", "flipBehavior", "flipOnUpdate", "offset", "placement", "popperOptions"],\n      c = a ? Element.prototype : {},\n      l = c.matches || c.matchesSelector || c.webkitMatchesSelector || c.mozMatchesSelector || c.msMatchesSelector;\n\n  function d(t) {\n    return [].slice.call(t);\n  }\n\n  function f(t, e) {\n    return m(t, function (t) {\n      return l.call(t, e);\n    });\n  }\n\n  function m(t, e) {\n    for (; t;) {\n      if (e(t)) return t;\n      t = t.parentElement;\n    }\n\n    return null;\n  }\n\n  var u = {\n    passive: !0\n  },\n      b = 4,\n      y = "x-placement",\n      v = "x-out-of-boundaries",\n      h = "tippy-iOS",\n      x = "tippy-active",\n      g = "tippy-popper",\n      w = "tippy-tooltip",\n      k = "tippy-content",\n      A = "tippy-backdrop",\n      E = "tippy-arrow",\n      C = "tippy-roundarrow",\n      L = ".".concat(g),\n      X = ".".concat(w),\n      Y = ".".concat(k),\n      T = ".".concat(A),\n      I = ".".concat(E),\n      S = ".".concat(C),\n      O = !1;\n\n  function z() {\n    O || (O = !0, o && document.body.classList.add(h), window.performance && document.addEventListener("mousemove", H));\n  }\n\n  var M = 0;\n\n  function H() {\n    var t = performance.now();\n    t - M < 20 && (O = !1, document.removeEventListener("mousemove", H), o || document.body.classList.remove(h)), M = t;\n  }\n\n  function V() {\n    var t = document.activeElement;\n    t && t.blur && t._tippy && t.blur();\n  }\n\n  var _ = Object.keys(p);\n\n  function N(t, e) {\n    return {}.hasOwnProperty.call(t, e);\n  }\n\n  function P(t, e, a) {\n    if (Array.isArray(t)) {\n      var r = t[e];\n      return null == r ? a : r;\n    }\n\n    return t;\n  }\n\n  function D(t, e) {\n    return 0 === e ? t : function (r) {\n      clearTimeout(a), a = setTimeout(function () {\n        t(r);\n      }, e);\n    };\n    var a;\n  }\n\n  function q(t, e) {\n    return t && t.modifiers && t.modifiers[e];\n  }\n\n  function B(t, e) {\n    return t.indexOf(e) > -1;\n  }\n\n  function F(t) {\n    return t instanceof Element;\n  }\n\n  function j(t) {\n    return !(!t || !N(t, "isVirtual")) || F(t);\n  }\n\n  function U(t, e) {\n    return "function" == typeof t ? t.apply(null, e) : t;\n  }\n\n  function W(t, e) {\n    t.filter(function (t) {\n      return "flip" === t.name;\n    })[0].enabled = e;\n  }\n\n  function R() {\n    return document.createElement("div");\n  }\n\n  function J(t, e) {\n    t.forEach(function (t) {\n      t && (t.style.transitionDuration = "".concat(e, "ms"));\n    });\n  }\n\n  function G(t, e) {\n    t.forEach(function (t) {\n      t && t.setAttribute("data-state", e);\n    });\n  }\n\n  function K(t, a) {\n    var r = e({}, a, {\n      content: U(a.content, [t])\n    }, a.ignoreAttributes ? {} : function (t) {\n      return _.reduce(function (e, a) {\n        var r = (t.getAttribute("data-tippy-".concat(a)) || "").trim();\n        if (!r) return e;\n        if ("content" === a) e[a] = r;else try {\n          e[a] = JSON.parse(r);\n        } catch (t) {\n          e[a] = r;\n        }\n        return e;\n      }, {});\n    }(t));\n    return (r.arrow || i) && (r.animateFill = !1), r;\n  }\n\n  function Q(t, e) {\n    Object.keys(t).forEach(function (t) {\n      if (!N(e, t)) throw new Error("[tippy]: `".concat(t, "` is not a valid option"));\n    });\n  }\n\n  function Z(t, e) {\n    t.innerHTML = F(e) ? e.innerHTML : e;\n  }\n\n  function $(t, e) {\n    if (F(e.content)) Z(t, ""), t.appendChild(e.content);else if ("function" != typeof e.content) {\n      t[e.allowHTML ? "innerHTML" : "textContent"] = e.content;\n    }\n  }\n\n  function tt(t) {\n    return {\n      tooltip: t.querySelector(X),\n      backdrop: t.querySelector(T),\n      content: t.querySelector(Y),\n      arrow: t.querySelector(I) || t.querySelector(S)\n    };\n  }\n\n  function et(t) {\n    t.setAttribute("data-inertia", "");\n  }\n\n  function at(t) {\n    var e = R();\n    return "round" === t ? (e.className = C, Z(e, \'<svg viewBox="0 0 18 7" xmlns="http://www.w3.org/2000/svg"><path d="M0 7s2.021-.015 5.253-4.218C6.584 1.051 7.797.007 9 0c1.203-.007 2.416 1.035 3.761 2.782C16.012 7.005 18 7 18 7H0z"/></svg>\')) : e.className = E, e;\n  }\n\n  function rt() {\n    var t = R();\n    return t.className = A, t.setAttribute("data-state", "hidden"), t;\n  }\n\n  function nt(t, e) {\n    t.setAttribute("tabindex", "-1"), e.setAttribute("data-interactive", "");\n  }\n\n  function it(t, e, a) {\n    var r = i && void 0 !== document.body.style.webkitTransition ? "webkitTransitionEnd" : "transitionend";\n    t[e + "EventListener"](r, a);\n  }\n\n  function ot(t) {\n    var e = t.getAttribute(y);\n    return e ? e.split("-")[0] : "";\n  }\n\n  function pt(t, e, a) {\n    a.split(" ").forEach(function (a) {\n      t.classList[e](a + "-theme");\n    });\n  }\n\n  function st(t, e) {\n    var a = R();\n    a.className = g, a.id = "tippy-".concat(t), a.style.zIndex = "" + e.zIndex, a.style.position = "absolute", a.style.top = "0", a.style.left = "0", e.role && a.setAttribute("role", e.role);\n    var r = R();\n    r.className = w, r.style.maxWidth = e.maxWidth + ("number" == typeof e.maxWidth ? "px" : ""), r.setAttribute("data-size", e.size), r.setAttribute("data-animation", e.animation), r.setAttribute("data-state", "hidden"), pt(r, "add", e.theme);\n    var n = R();\n    return n.className = k, n.setAttribute("data-state", "hidden"), e.interactive && nt(a, r), e.arrow && r.appendChild(at(e.arrowType)), e.animateFill && (r.appendChild(rt()), r.setAttribute("data-animatefill", "")), e.inertia && et(r), $(n, e), r.appendChild(n), a.appendChild(r), a;\n  }\n\n  function ct(t, e, a) {\n    var r = tt(t),\n        n = r.tooltip,\n        i = r.content,\n        o = r.backdrop,\n        p = r.arrow;\n    t.style.zIndex = "" + a.zIndex, n.setAttribute("data-size", a.size), n.setAttribute("data-animation", a.animation), n.style.maxWidth = a.maxWidth + ("number" == typeof a.maxWidth ? "px" : ""), a.role ? t.setAttribute("role", a.role) : t.removeAttribute("role"), e.content !== a.content && $(i, a), !e.animateFill && a.animateFill ? (n.appendChild(rt()), n.setAttribute("data-animatefill", "")) : e.animateFill && !a.animateFill && (n.removeChild(o), n.removeAttribute("data-animatefill")), !e.arrow && a.arrow ? n.appendChild(at(a.arrowType)) : e.arrow && !a.arrow && n.removeChild(p), e.arrow && a.arrow && e.arrowType !== a.arrowType && n.replaceChild(at(a.arrowType), p), !e.interactive && a.interactive ? nt(t, n) : e.interactive && !a.interactive && function (t, e) {\n      t.removeAttribute("tabindex"), e.removeAttribute("data-interactive");\n    }(t, n), !e.inertia && a.inertia ? et(n) : e.inertia && !a.inertia && function (t) {\n      t.removeAttribute("data-inertia");\n    }(n), e.theme !== a.theme && (pt(n, "remove", e.theme), pt(n, "add", a.theme));\n  }\n\n  var lt = 1,\n      dt = [];\n\n  function ft(a, r) {\n    var i,\n        o,\n        c,\n        h,\n        g,\n        w = K(a, r);\n    if (!w.multiple && a._tippy) return null;\n\n    var k,\n        A,\n        E,\n        C,\n        X,\n        Y = !1,\n        T = !1,\n        I = !1,\n        S = !1,\n        z = [],\n        M = D(ht, w.interactiveDebounce),\n        H = lt++,\n        V = st(H, w),\n        _ = tt(V),\n        j = {\n      id: H,\n      reference: a,\n      popper: V,\n      popperChildren: _,\n      popperInstance: null,\n      props: w,\n      state: {\n        isEnabled: !0,\n        isVisible: !1,\n        isDestroyed: !1,\n        isMounted: !1,\n        isShown: !1\n      },\n      clearDelayTimeouts: Tt,\n      set: It,\n      setContent: function (t) {\n        It({\n          content: t\n        });\n      },\n      show: St,\n      hide: Ot,\n      enable: function () {\n        j.state.isEnabled = !0;\n      },\n      disable: function () {\n        j.state.isEnabled = !1;\n      },\n      destroy: function (t) {\n        if (j.state.isDestroyed) return;\n        T = !0, j.state.isMounted && Ot(0);\n        bt(), delete a._tippy;\n        var e = j.props.target;\n        e && t && F(a) && d(a.querySelectorAll(e)).forEach(function (t) {\n          t._tippy && t._tippy.destroy();\n        });\n        j.popperInstance && j.popperInstance.destroy();\n        T = !1, j.state.isDestroyed = !0;\n      }\n    };\n\n    return a._tippy = j, V._tippy = j, ut(), w.lazy || Ct(), w.showOnInit && Lt(), !w.a11y || w.target || !F(X = $()) || l.call(X, "a[href],area[href],button,details,input,textarea,select,iframe,[tabindex]") && !X.hasAttribute("disabled") || $().setAttribute("tabindex", "0"), V.addEventListener("mouseenter", function (t) {\n      j.props.interactive && j.state.isVisible && "mouseenter" === i && Lt(t, !0);\n    }), V.addEventListener("mouseleave", function () {\n      j.props.interactive && "mouseenter" === i && document.addEventListener("mousemove", M);\n    }), j;\n\n    function R() {\n      document.removeEventListener("mousemove", yt);\n    }\n\n    function Z() {\n      document.body.removeEventListener("mouseleave", Xt), document.removeEventListener("mousemove", M), dt = dt.filter(function (t) {\n        return t !== M;\n      });\n    }\n\n    function $() {\n      return j.props.triggerTarget || a;\n    }\n\n    function et() {\n      document.addEventListener("click", Yt, !0);\n    }\n\n    function at() {\n      document.removeEventListener("click", Yt, !0);\n    }\n\n    function rt() {\n      return [j.popperChildren.tooltip, j.popperChildren.backdrop, j.popperChildren.content];\n    }\n\n    function nt() {\n      var t = j.props.followCursor;\n      return t && "focus" !== i || O && "initial" === t;\n    }\n\n    function pt(t, e) {\n      var a = j.popperChildren.tooltip;\n\n      function r(t) {\n        t.target === a && (it(a, "remove", r), e());\n      }\n\n      if (0 === t) return e();\n      it(a, "remove", E), it(a, "add", r), E = r;\n    }\n\n    function mt(t, e) {\n      var a = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n      $().addEventListener(t, e, a), z.push({\n        eventType: t,\n        handler: e,\n        options: a\n      });\n    }\n\n    function ut() {\n      j.props.touchHold && !j.props.target && (mt("touchstart", vt, u), mt("touchend", xt, u)), j.props.trigger.trim().split(" ").forEach(function (t) {\n        if ("manual" !== t) if (j.props.target) switch (t) {\n          case "mouseenter":\n            mt("mouseover", wt), mt("mouseout", kt);\n            break;\n\n          case "focus":\n            mt("focusin", wt), mt("focusout", kt);\n            break;\n\n          case "click":\n            mt(t, wt);\n        } else switch (mt(t, vt), t) {\n          case "mouseenter":\n            mt("mouseleave", xt);\n            break;\n\n          case "focus":\n            mt(n ? "focusout" : "blur", gt);\n        }\n      });\n    }\n\n    function bt() {\n      z.forEach(function (t) {\n        var e = t.eventType,\n            a = t.handler,\n            r = t.options;\n        $().removeEventListener(e, a, r);\n      }), z = [];\n    }\n\n    function yt(t) {\n      var r = o = t,\n          n = r.clientX,\n          i = r.clientY;\n\n      if (C) {\n        var p = m(t.target, function (t) {\n          return t === a;\n        }),\n            s = a.getBoundingClientRect(),\n            c = j.props.followCursor,\n            l = "horizontal" === c,\n            d = "vertical" === c,\n            f = B(["top", "bottom"], ot(V)),\n            u = V.getAttribute(y),\n            b = !!u && !!u.split("-")[1],\n            v = f ? V.offsetWidth : V.offsetHeight,\n            h = v / 2,\n            x = f ? 0 : b ? v : h,\n            g = f ? b ? v : h : 0;\n        !p && j.props.interactive || (j.popperInstance.reference = e({}, j.popperInstance.reference, {\n          referenceNode: a,\n          clientWidth: 0,\n          clientHeight: 0,\n          getBoundingClientRect: function () {\n            return {\n              width: f ? v : 0,\n              height: f ? 0 : v,\n              top: (l ? s.top : i) - x,\n              bottom: (l ? s.bottom : i) + x,\n              left: (d ? s.left : n) - g,\n              right: (d ? s.right : n) + g\n            };\n          }\n        }), j.popperInstance.update()), "initial" === c && j.state.isVisible && R();\n      }\n    }\n\n    function vt(t) {\n      j.state.isEnabled && !At(t) && (j.state.isVisible || (i = t.type, t instanceof MouseEvent && (o = t, dt.forEach(function (e) {\n        return e(t);\n      }))), "click" === t.type && !1 !== j.props.hideOnClick && j.state.isVisible ? Xt() : Lt(t));\n    }\n\n    function ht(t) {\n      var e = f(t.target, L) === V,\n          r = m(t.target, function (t) {\n        return t === a;\n      });\n      e || r || function (t, e, a, r) {\n        if (!t) return !0;\n        var n = a.clientX,\n            i = a.clientY,\n            o = r.interactiveBorder,\n            p = r.distance,\n            s = e.top - i > ("top" === t ? o + p : o),\n            c = i - e.bottom > ("bottom" === t ? o + p : o),\n            l = e.left - n > ("left" === t ? o + p : o),\n            d = n - e.right > ("right" === t ? o + p : o);\n        return s || c || l || d;\n      }(ot(V), V.getBoundingClientRect(), t, j.props) && (Z(), Xt());\n    }\n\n    function xt(t) {\n      if (!At(t)) return j.props.interactive ? (document.body.addEventListener("mouseleave", Xt), document.addEventListener("mousemove", M), void dt.push(M)) : void Xt();\n    }\n\n    function gt(t) {\n      t.target === $() && (j.props.interactive && t.relatedTarget && V.contains(t.relatedTarget) || Xt());\n    }\n\n    function wt(t) {\n      f(t.target, j.props.target) && Lt(t);\n    }\n\n    function kt(t) {\n      f(t.target, j.props.target) && Xt();\n    }\n\n    function At(t) {\n      var e = ("ontouchstart" in window),\n          a = B(t.type, "touch"),\n          r = j.props.touchHold;\n      return e && O && r && !a || O && !r && a;\n    }\n\n    function Et() {\n      !S && A && (S = !0, function (t) {\n        t.offsetHeight;\n      }(V), A());\n    }\n\n    function Ct() {\n      var r = j.props.popperOptions,\n          n = j.popperChildren,\n          i = n.tooltip,\n          o = n.arrow,\n          p = q(r, "preventOverflow");\n\n      function s(t) {\n        j.props.flip && !j.props.flipOnUpdate && (t.flipped && (j.popperInstance.options.placement = t.placement), W(j.popperInstance.modifiers, !1)), i.setAttribute(y, t.placement), !1 !== t.attributes[v] ? i.setAttribute(v, "") : i.removeAttribute(v), k && k !== t.placement && I && (i.style.transition = "none", requestAnimationFrame(function () {\n          i.style.transition = "";\n        })), k = t.placement, I = j.state.isVisible;\n        var a = ot(V),\n            r = i.style;\n        r.top = r.bottom = r.left = r.right = "", r[a] = -(j.props.distance - 10) + "px";\n        var n = p && void 0 !== p.padding ? p.padding : b,\n            o = "number" == typeof n,\n            s = e({\n          top: o ? n : n.top,\n          bottom: o ? n : n.bottom,\n          left: o ? n : n.left,\n          right: o ? n : n.right\n        }, !o && n);\n        s[a] = o ? n + j.props.distance : (n[a] || 0) + j.props.distance, j.popperInstance.modifiers.filter(function (t) {\n          return "preventOverflow" === t.name;\n        })[0].padding = s, C = s;\n      }\n\n      var c = e({\n        eventsEnabled: !1,\n        placement: j.props.placement\n      }, r, {\n        modifiers: e({}, r ? r.modifiers : {}, {\n          preventOverflow: e({\n            boundariesElement: j.props.boundary,\n            padding: b\n          }, p),\n          arrow: e({\n            element: o,\n            enabled: !!o\n          }, q(r, "arrow")),\n          flip: e({\n            enabled: j.props.flip,\n            padding: j.props.distance + b,\n            behavior: j.props.flipBehavior\n          }, q(r, "flip")),\n          offset: e({\n            offset: j.props.offset\n          }, q(r, "offset"))\n        }),\n        onCreate: function (t) {\n          s(t), Et(), r && r.onCreate && r.onCreate(t);\n        },\n        onUpdate: function (t) {\n          s(t), Et(), r && r.onUpdate && r.onUpdate(t);\n        }\n      });\n      j.popperInstance = new t(a, V, c);\n    }\n\n    function Lt(t, a) {\n      if (Tt(), !j.state.isVisible) {\n        if (j.props.target) return function (t) {\n          if (t) {\n            var a = f(t.target, j.props.target);\n            a && !a._tippy && ft(a, e({}, j.props, {\n              content: U(r.content, [a]),\n              appendTo: r.appendTo,\n              target: "",\n              showOnInit: !0\n            }));\n          }\n        }(t);\n        if (Y = !0, t && !a && j.props.onTrigger(j, t), j.props.wait) return j.props.wait(j, t);\n        nt() && !j.state.isMounted && (j.popperInstance || Ct(), document.addEventListener("mousemove", yt)), et();\n        var n = P(j.props.delay, 0, p.delay);\n        n ? c = setTimeout(function () {\n          St();\n        }, n) : St();\n      }\n    }\n\n    function Xt() {\n      if (Tt(), !j.state.isVisible) return R(), void at();\n      Y = !1;\n      var t = P(j.props.delay, 1, p.delay);\n      t ? h = setTimeout(function () {\n        j.state.isVisible && Ot();\n      }, t) : g = requestAnimationFrame(function () {\n        Ot();\n      });\n    }\n\n    function Yt(t) {\n      if (!j.props.interactive || !V.contains(t.target)) {\n        if ($().contains(t.target)) {\n          if (O) return;\n          if (j.state.isVisible && B(j.props.trigger, "click")) return;\n        }\n\n        !0 === j.props.hideOnClick && (Tt(), Ot());\n      }\n    }\n\n    function Tt() {\n      clearTimeout(c), clearTimeout(h), cancelAnimationFrame(g);\n    }\n\n    function It(t) {\n      Q(t = t || {}, p), bt();\n      var r = j.props,\n          n = K(a, e({}, j.props, {}, t, {\n        ignoreAttributes: !0\n      }));\n      n.ignoreAttributes = N(t, "ignoreAttributes") ? t.ignoreAttributes || !1 : r.ignoreAttributes, j.props = n, ut(), Z(), M = D(ht, n.interactiveDebounce), ct(V, r, n), j.popperChildren = tt(V), j.popperInstance && (s.some(function (e) {\n        return N(t, e) && t[e] !== r[e];\n      }) ? (j.popperInstance.destroy(), Ct(), j.state.isVisible && j.popperInstance.enableEventListeners(), j.props.followCursor && o && yt(o)) : j.popperInstance.update());\n    }\n\n    function St() {\n      var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : P(j.props.duration, 0, p.duration[1]);\n\n      if (!j.state.isDestroyed && j.state.isEnabled && (!O || j.props.touch) && !$().hasAttribute("disabled") && !1 !== j.props.onShow(j)) {\n        et(), V.style.visibility = "visible", j.state.isVisible = !0, j.props.interactive && $().classList.add(x);\n        var e = rt();\n        J(e.concat(V), 0), A = function () {\n          if (j.state.isVisible) {\n            var r = nt();\n            r && o ? yt(o) : r || j.popperInstance.update(), j.popperChildren.backdrop && (j.popperChildren.content.style.transitionDelay = Math.round(t / 12) + "ms"), j.props.sticky && function () {\n              J([V], n ? 0 : j.props.updateDuration);\n              var t = a.getBoundingClientRect();\n              !function e() {\n                var r = a.getBoundingClientRect();\n                t.top === r.top && t.right === r.right && t.bottom === r.bottom && t.left === r.left || j.popperInstance.scheduleUpdate(), t = r, j.state.isMounted && requestAnimationFrame(e);\n              }();\n            }(), J([V], j.props.updateDuration), J(e, t), G(e, "visible"), function (t, e) {\n              pt(t, e);\n            }(t, function () {\n              j.props.aria && $().setAttribute("aria-".concat(j.props.aria), V.id), j.props.onShown(j), j.state.isShown = !0;\n            });\n          }\n        }, function () {\n          S = !1;\n          var t = nt();\n          j.popperInstance ? (W(j.popperInstance.modifiers, j.props.flip), t || (j.popperInstance.reference = a, j.popperInstance.enableEventListeners()), j.popperInstance.scheduleUpdate()) : (Ct(), t || j.popperInstance.enableEventListeners());\n          var e = j.props.appendTo,\n              r = "parent" === e ? a.parentNode : U(e, [a]);\n          r.contains(V) || (r.appendChild(V), j.props.onMount(j), j.state.isMounted = !0);\n        }();\n      }\n    }\n\n    function Ot() {\n      var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : P(j.props.duration, 1, p.duration[1]);\n\n      if (!j.state.isDestroyed && (j.state.isEnabled || T) && (!1 !== j.props.onHide(j) || T)) {\n        at(), V.style.visibility = "hidden", j.state.isVisible = !1, j.state.isShown = !1, I = !1, j.props.interactive && $().classList.remove(x);\n        var e = rt();\n        J(e, t), G(e, "hidden"), function (t, e) {\n          pt(t, function () {\n            !j.state.isVisible && V.parentNode && V.parentNode.contains(V) && e();\n          });\n        }(t, function () {\n          Y || R(), j.props.aria && $().removeAttribute("aria-".concat(j.props.aria)), j.popperInstance.disableEventListeners(), j.popperInstance.options.placement = j.props.placement, V.parentNode.removeChild(V), j.props.onHidden(j), j.state.isMounted = !1;\n        });\n      }\n    }\n  }\n\n  var mt = !1;\n\n  function ut(t, a) {\n    Q(a || {}, p), mt || (document.addEventListener("touchstart", z, u), window.addEventListener("blur", V), mt = !0);\n    var r,\n        n = e({}, p, {}, a);\n    r = t, "[object Object]" !== {}.toString.call(r) || r.addEventListener || function (t) {\n      var e = {\n        isVirtual: !0,\n        attributes: t.attributes || {},\n        contains: function () {},\n        setAttribute: function (e, a) {\n          t.attributes[e] = a;\n        },\n        getAttribute: function (e) {\n          return t.attributes[e];\n        },\n        removeAttribute: function (e) {\n          delete t.attributes[e];\n        },\n        hasAttribute: function (e) {\n          return e in t.attributes;\n        },\n        addEventListener: function () {},\n        removeEventListener: function () {},\n        classList: {\n          classNames: {},\n          add: function (e) {\n            t.classList.classNames[e] = !0;\n          },\n          remove: function (e) {\n            delete t.classList.classNames[e];\n          },\n          contains: function (e) {\n            return e in t.classList.classNames;\n          }\n        }\n      };\n\n      for (var a in e) t[a] = e[a];\n    }(t);\n\n    var i = function (t) {\n      if (j(t)) return [t];\n      if (t instanceof NodeList) return d(t);\n      if (Array.isArray(t)) return t;\n\n      try {\n        return d(document.querySelectorAll(t));\n      } catch (t) {\n        return [];\n      }\n    }(t).reduce(function (t, e) {\n      var a = e && ft(e, n);\n      return a && t.push(a), t;\n    }, []);\n\n    return j(t) ? i[0] : i;\n  }\n\n  return ut.version = "4.3.5", ut.defaults = p, ut.setDefaults = function (t) {\n    Object.keys(t).forEach(function (e) {\n      p[e] = t[e];\n    });\n  }, ut.hideAll = function () {\n    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n        e = t.exclude,\n        a = t.duration;\n    d(document.querySelectorAll(L)).forEach(function (t) {\n      var r,\n          n = t._tippy;\n\n      if (n) {\n        var i = !1;\n        e && (i = (r = e)._tippy && !l.call(r, L) ? n.reference === e : t === e.popper), i || n.hide(a);\n      }\n    });\n  }, ut.group = function (t) {\n    var a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n        r = a.delay,\n        n = void 0 === r ? t[0].props.delay : r,\n        i = a.duration,\n        o = void 0 === i ? 0 : i,\n        p = !1;\n\n    function s(t) {\n      p = t, f();\n    }\n\n    function c(e) {\n      e._originalProps.onShow(e), t.forEach(function (t) {\n        t.set({\n          duration: o\n        }), t.state.isVisible && t.hide();\n      }), s(!0);\n    }\n\n    function l(t) {\n      t._originalProps.onHide(t), s(!1);\n    }\n\n    function d(t) {\n      t._originalProps.onShown(t), t.set({\n        duration: t._originalProps.duration\n      });\n    }\n\n    function f() {\n      t.forEach(function (t) {\n        t.set({\n          onShow: c,\n          onShown: d,\n          onHide: l,\n          delay: p ? [0, Array.isArray(n) ? n[1] : n] : n,\n          duration: p ? o : t._originalProps.duration\n        });\n      });\n    }\n\n    t.forEach(function (t) {\n      t._originalProps ? t.set(t._originalProps) : t._originalProps = e({}, t.props);\n    }), f();\n  }, a && setTimeout(function () {\n    d(document.querySelectorAll("[data-tippy]")).forEach(function (t) {\n      var e = t.getAttribute("data-tippy");\n      e && ut(t, {\n        content: e\n      });\n    });\n  }), function (t) {\n    if (a) {\n      var e = document.createElement("style");\n      e.type = "text/css", e.textContent = t, e.setAttribute("data-tippy-stylesheet", "");\n      var r = document.head,\n          n = r.querySelector("style,link");\n      n ? r.insertBefore(e, n) : r.appendChild(e);\n    }\n  }(\'.tippy-iOS{cursor:pointer!important;-webkit-tap-highlight-color:transparent}.tippy-popper{transition-timing-function:cubic-bezier(.165,.84,.44,1);max-width:calc(100% - 8px);pointer-events:none;outline:0}.tippy-popper[x-placement^=top] .tippy-backdrop{border-radius:40% 40% 0 0}.tippy-popper[x-placement^=top] .tippy-roundarrow{bottom:-7px;bottom:-6.5px;-webkit-transform-origin:50% 0;transform-origin:50% 0;margin:0 3px}.tippy-popper[x-placement^=top] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(180deg);transform:rotate(180deg)}.tippy-popper[x-placement^=top] .tippy-arrow{border-top:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;bottom:-7px;margin:0 3px;-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-backdrop{-webkit-transform-origin:0 25%;transform-origin:0 25%}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-55%);transform:scale(1) translate(-50%,-55%)}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%,-45%);transform:scale(.2) translate(-50%,-45%);opacity:0}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}.tippy-popper[x-placement^=top] [data-animation=perspective]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(-10px);transform:perspective(700px) translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateX(60deg);transform:perspective(700px) rotateX(60deg)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=top] [data-animation=scale]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px) scale(.5);transform:translateY(-10px) scale(.5)}.tippy-popper[x-placement^=bottom] .tippy-backdrop{border-radius:0 0 30% 30%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow{top:-7px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%;margin:0 3px}.tippy-popper[x-placement^=bottom] .tippy-roundarrow svg{position:absolute;left:0}.tippy-popper[x-placement^=bottom] .tippy-arrow{border-bottom:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;top:-7px;margin:0 3px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-backdrop{-webkit-transform-origin:0 -50%;transform-origin:0 -50%}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-45%);transform:scale(1) translate(-50%,-45%)}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%);transform:scale(.2) translate(-50%);opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(20px);transform:translateY(20px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(10px);transform:perspective(700px) translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateX(-60deg);transform:perspective(700px) rotateX(-60deg)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=scale]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px) scale(.5);transform:translateY(10px) scale(.5)}.tippy-popper[x-placement^=left] .tippy-backdrop{border-radius:50% 0 0 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow{right:-12px;-webkit-transform-origin:33.33333333% 50%;transform-origin:33.33333333% 50%;margin:3px 0}.tippy-popper[x-placement^=left] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(90deg);transform:rotate(90deg)}.tippy-popper[x-placement^=left] .tippy-arrow{border-left:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;right:-7px;margin:3px 0;-webkit-transform-origin:0 50%;transform-origin:0 50%}.tippy-popper[x-placement^=left] .tippy-backdrop{-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-75%,-50%);transform:scale(.2) translate(-75%,-50%);opacity:0}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(-20px);transform:translateX(-20px)}.tippy-popper[x-placement^=left] [data-animation=perspective]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(-10px);transform:perspective(700px) translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateY(-60deg);transform:perspective(700px) rotateY(-60deg)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=left] [data-animation=scale]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px) scale(.5);transform:translateX(-10px) scale(.5)}.tippy-popper[x-placement^=right] .tippy-backdrop{border-radius:0 50% 50% 0}.tippy-popper[x-placement^=right] .tippy-roundarrow{left:-12px;-webkit-transform-origin:66.66666666% 50%;transform-origin:66.66666666% 50%;margin:3px 0}.tippy-popper[x-placement^=right] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.tippy-popper[x-placement^=right] .tippy-arrow{border-right:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;left:-7px;margin:3px 0;-webkit-transform-origin:100% 50%;transform-origin:100% 50%}.tippy-popper[x-placement^=right] .tippy-backdrop{-webkit-transform-origin:-50% 0;transform-origin:-50% 0}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-25%,-50%);transform:scale(.2) translate(-25%,-50%);opacity:0}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(20px);transform:translateX(20px)}.tippy-popper[x-placement^=right] [data-animation=perspective]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(10px);transform:perspective(700px) translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateY(60deg);transform:perspective(700px) rotateY(60deg)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=right] [data-animation=scale]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px) scale(.5);transform:translateX(10px) scale(.5)}.tippy-tooltip{position:relative;color:#fff;border-radius:.25rem;font-size:.875rem;padding:.3125rem .5625rem;line-height:1.4;text-align:center;background-color:#333}.tippy-tooltip[data-size=small]{padding:.1875rem .375rem;font-size:.75rem}.tippy-tooltip[data-size=large]{padding:.375rem .75rem;font-size:1rem}.tippy-tooltip[data-animatefill]{overflow:hidden;background-color:initial}.tippy-tooltip[data-interactive],.tippy-tooltip[data-interactive] .tippy-roundarrow path{pointer-events:auto}.tippy-tooltip[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}.tippy-tooltip[data-inertia][data-state=hidden]{transition-timing-function:ease}.tippy-arrow,.tippy-roundarrow{position:absolute;width:0;height:0}.tippy-roundarrow{width:18px;height:7px;fill:#333;pointer-events:none}.tippy-backdrop{position:absolute;background-color:#333;border-radius:50%;width:calc(110% + 2rem);left:50%;top:50%;z-index:-1;transition:all cubic-bezier(.46,.1,.52,.98);-webkit-backface-visibility:hidden;backface-visibility:hidden}.tippy-backdrop:after{content:"";float:left;padding-top:100%}.tippy-backdrop+.tippy-content{transition-property:opacity;will-change:opacity}.tippy-backdrop+.tippy-content[data-state=hidden]{opacity:0}\'), ut;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n')},16:function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function("return this")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbWJvc3NBZGRvbi5bbmFtZV0vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6IjE2LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n')},42:function(module,exports,__webpack_require__){eval('/*!***************************************************\n* mark.js v8.11.1\n* https://markjs.io/\n* Copyright (c) 2014–2018, Julian Kühnel\n* Released under the MIT license https://git.io/vwTVl\n*****************************************************/\n!function (e, t) {\n   true ? module.exports = t() : undefined;\n}(this, function () {\n  "use strict";\n\n  class e {\n    constructor(e, t = !0, s = [], r = 5e3) {\n      this.ctx = e, this.iframes = t, this.exclude = s, this.iframesTimeout = r;\n    }\n\n    static matches(e, t) {\n      const s = "string" == typeof t ? [t] : t,\n            r = e.matches || e.matchesSelector || e.msMatchesSelector || e.mozMatchesSelector || e.oMatchesSelector || e.webkitMatchesSelector;\n\n      if (r) {\n        let t = !1;\n        return s.every(s => !r.call(e, s) || (t = !0, !1)), t;\n      }\n\n      return !1;\n    }\n\n    getContexts() {\n      let e,\n          t = [];\n      return (e = void 0 !== this.ctx && this.ctx ? NodeList.prototype.isPrototypeOf(this.ctx) ? Array.prototype.slice.call(this.ctx) : Array.isArray(this.ctx) ? this.ctx : "string" == typeof this.ctx ? Array.prototype.slice.call(document.querySelectorAll(this.ctx)) : [this.ctx] : []).forEach(e => {\n        const s = t.filter(t => t.contains(e)).length > 0;\n        -1 !== t.indexOf(e) || s || t.push(e);\n      }), t;\n    }\n\n    getIframeContents(e, t, s = () => {}) {\n      let r;\n\n      try {\n        const t = e.contentWindow;\n        if (r = t.document, !t || !r) throw new Error("iframe inaccessible");\n      } catch (e) {\n        s();\n      }\n\n      r && t(r);\n    }\n\n    isIframeBlank(e) {\n      const t = "about:blank",\n            s = e.getAttribute("src").trim(),\n            r = e.contentWindow.location.href;\n      return r === t && s !== t && s;\n    }\n\n    observeIframeLoad(e, t, s) {\n      let r = !1,\n          i = null;\n\n      const o = () => {\n        if (!r) {\n          r = !0, clearTimeout(i);\n\n          try {\n            this.isIframeBlank(e) || (e.removeEventListener("load", o), this.getIframeContents(e, t, s));\n          } catch (e) {\n            s();\n          }\n        }\n      };\n\n      e.addEventListener("load", o), i = setTimeout(o, this.iframesTimeout);\n    }\n\n    onIframeReady(e, t, s) {\n      try {\n        "complete" === e.contentWindow.document.readyState ? this.isIframeBlank(e) ? this.observeIframeLoad(e, t, s) : this.getIframeContents(e, t, s) : this.observeIframeLoad(e, t, s);\n      } catch (e) {\n        s();\n      }\n    }\n\n    waitForIframes(e, t) {\n      let s = 0;\n      this.forEachIframe(e, () => !0, e => {\n        s++, this.waitForIframes(e.querySelector("html"), () => {\n          --s || t();\n        });\n      }, e => {\n        e || t();\n      });\n    }\n\n    forEachIframe(t, s, r, i = () => {}) {\n      let o = t.querySelectorAll("iframe"),\n          n = o.length,\n          a = 0;\n      o = Array.prototype.slice.call(o);\n\n      const c = () => {\n        --n <= 0 && i(a);\n      };\n\n      n || c(), o.forEach(t => {\n        e.matches(t, this.exclude) ? c() : this.onIframeReady(t, e => {\n          s(t) && (a++, r(e)), c();\n        }, c);\n      });\n    }\n\n    createIterator(e, t, s) {\n      return document.createNodeIterator(e, t, s, !1);\n    }\n\n    createInstanceOnIframe(t) {\n      return new e(t.querySelector("html"), this.iframes);\n    }\n\n    compareNodeIframe(e, t, s) {\n      const r = e.compareDocumentPosition(s),\n            i = Node.DOCUMENT_POSITION_PRECEDING;\n\n      if (r & i) {\n        if (null === t) return !0;\n        if (t.compareDocumentPosition(s) & Node.DOCUMENT_POSITION_FOLLOWING) return !0;\n      }\n\n      return !1;\n    }\n\n    getIteratorNode(e) {\n      const t = e.previousNode();\n      let s;\n      return {\n        prevNode: t,\n        node: s = null === t ? e.nextNode() : e.nextNode() && e.nextNode()\n      };\n    }\n\n    checkIframeFilter(e, t, s, r) {\n      let i = !1,\n          o = !1;\n      return r.forEach((e, t) => {\n        e.val === s && (i = t, o = e.handled);\n      }), this.compareNodeIframe(e, t, s) ? (!1 !== i || o ? !1 === i || o || (r[i].handled = !0) : r.push({\n        val: s,\n        handled: !0\n      }), !0) : (!1 === i && r.push({\n        val: s,\n        handled: !1\n      }), !1);\n    }\n\n    handleOpenIframes(e, t, s, r) {\n      e.forEach(e => {\n        e.handled || this.getIframeContents(e.val, e => {\n          this.createInstanceOnIframe(e).forEachNode(t, s, r);\n        });\n      });\n    }\n\n    iterateThroughNodes(e, t, s, r, i) {\n      const o = this.createIterator(t, e, r);\n\n      let n,\n          a,\n          c = [],\n          h = [],\n          l = () => (({\n        prevNode: a,\n        node: n\n      } = this.getIteratorNode(o)), n);\n\n      for (; l();) this.iframes && this.forEachIframe(t, e => this.checkIframeFilter(n, a, e, c), t => {\n        this.createInstanceOnIframe(t).forEachNode(e, e => h.push(e), r);\n      }), h.push(n);\n\n      h.forEach(e => {\n        s(e);\n      }), this.iframes && this.handleOpenIframes(c, e, s, r), i();\n    }\n\n    forEachNode(e, t, s, r = () => {}) {\n      const i = this.getContexts();\n      let o = i.length;\n      o || r(), i.forEach(i => {\n        const n = () => {\n          this.iterateThroughNodes(e, i, t, s, () => {\n            --o <= 0 && r();\n          });\n        };\n\n        this.iframes ? this.waitForIframes(i, n) : n();\n      });\n    }\n\n  }\n\n  class t {\n    constructor(e) {\n      this.ctx = e, this.ie = !1;\n      const t = window.navigator.userAgent;\n      (t.indexOf("MSIE") > -1 || t.indexOf("Trident") > -1) && (this.ie = !0);\n    }\n\n    set opt(e) {\n      this._opt = Object.assign({}, {\n        element: "",\n        className: "",\n        exclude: [],\n        iframes: !1,\n        iframesTimeout: 5e3,\n        separateWordSearch: !0,\n        diacritics: !0,\n        synonyms: {},\n        accuracy: "partially",\n        acrossElements: !1,\n        caseSensitive: !1,\n        ignoreJoiners: !1,\n        ignoreGroups: 0,\n        ignorePunctuation: [],\n        wildcards: "disabled",\n        each: () => {},\n        noMatch: () => {},\n        filter: () => !0,\n        done: () => {},\n        debug: !1,\n        log: window.console\n      }, e);\n    }\n\n    get opt() {\n      return this._opt;\n    }\n\n    get iterator() {\n      return new e(this.ctx, this.opt.iframes, this.opt.exclude, this.opt.iframesTimeout);\n    }\n\n    log(e, t = "debug") {\n      const s = this.opt.log;\n      this.opt.debug && "object" == typeof s && "function" == typeof s[t] && s[t](`mark.js: ${e}`);\n    }\n\n    escapeStr(e) {\n      return e.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, "\\\\$&");\n    }\n\n    createRegExp(e) {\n      return "disabled" !== this.opt.wildcards && (e = this.setupWildcardsRegExp(e)), e = this.escapeStr(e), Object.keys(this.opt.synonyms).length && (e = this.createSynonymsRegExp(e)), (this.opt.ignoreJoiners || this.opt.ignorePunctuation.length) && (e = this.setupIgnoreJoinersRegExp(e)), this.opt.diacritics && (e = this.createDiacriticsRegExp(e)), e = this.createMergedBlanksRegExp(e), (this.opt.ignoreJoiners || this.opt.ignorePunctuation.length) && (e = this.createJoinersRegExp(e)), "disabled" !== this.opt.wildcards && (e = this.createWildcardsRegExp(e)), e = this.createAccuracyRegExp(e);\n    }\n\n    createSynonymsRegExp(e) {\n      const t = this.opt.synonyms,\n            s = this.opt.caseSensitive ? "" : "i",\n            r = this.opt.ignoreJoiners || this.opt.ignorePunctuation.length ? "\\0" : "";\n\n      for (let i in t) if (t.hasOwnProperty(i)) {\n        const o = t[i],\n              n = "disabled" !== this.opt.wildcards ? this.setupWildcardsRegExp(i) : this.escapeStr(i),\n              a = "disabled" !== this.opt.wildcards ? this.setupWildcardsRegExp(o) : this.escapeStr(o);\n        "" !== n && "" !== a && (e = e.replace(new RegExp(`(${this.escapeStr(n)}|${this.escapeStr(a)})`, `gm${s}`), r + `(${this.processSynomyms(n)}|` + `${this.processSynomyms(a)})` + r));\n      }\n\n      return e;\n    }\n\n    processSynomyms(e) {\n      return (this.opt.ignoreJoiners || this.opt.ignorePunctuation.length) && (e = this.setupIgnoreJoinersRegExp(e)), e;\n    }\n\n    setupWildcardsRegExp(e) {\n      return (e = e.replace(/(?:\\\\)*\\?/g, e => "\\\\" === e.charAt(0) ? "?" : "")).replace(/(?:\\\\)*\\*/g, e => "\\\\" === e.charAt(0) ? "*" : "");\n    }\n\n    createWildcardsRegExp(e) {\n      let t = "withSpaces" === this.opt.wildcards;\n      return e.replace(/\\u0001/g, t ? "[\\\\S\\\\s]?" : "\\\\S?").replace(/\\u0002/g, t ? "[\\\\S\\\\s]*?" : "\\\\S*");\n    }\n\n    setupIgnoreJoinersRegExp(e) {\n      return e.replace(/[^(|)\\\\]/g, (e, t, s) => {\n        let r = s.charAt(t + 1);\n        return /[(|)\\\\]/.test(r) || "" === r ? e : e + "\\0";\n      });\n    }\n\n    createJoinersRegExp(e) {\n      let t = [];\n      const s = this.opt.ignorePunctuation;\n      return Array.isArray(s) && s.length && t.push(this.escapeStr(s.join(""))), this.opt.ignoreJoiners && t.push("\\\\u00ad\\\\u200b\\\\u200c\\\\u200d"), t.length ? e.split(/\\u0000+/).join(`[${t.join("")}]*`) : e;\n    }\n\n    createDiacriticsRegExp(e) {\n      const t = this.opt.caseSensitive ? "" : "i",\n            s = this.opt.caseSensitive ? ["aàáảãạăằắẳẵặâầấẩẫậäåāą", "AÀÁẢÃẠĂẰẮẲẴẶÂẦẤẨẪẬÄÅĀĄ", "cçćč", "CÇĆČ", "dđď", "DĐĎ", "eèéẻẽẹêềếểễệëěēę", "EÈÉẺẼẸÊỀẾỂỄỆËĚĒĘ", "iìíỉĩịîïī", "IÌÍỈĨỊÎÏĪ", "lł", "LŁ", "nñňń", "NÑŇŃ", "oòóỏõọôồốổỗộơởỡớờợöøō", "OÒÓỎÕỌÔỒỐỔỖỘƠỞỠỚỜỢÖØŌ", "rř", "RŘ", "sšśșş", "SŠŚȘŞ", "tťțţ", "TŤȚŢ", "uùúủũụưừứửữựûüůū", "UÙÚỦŨỤƯỪỨỬỮỰÛÜŮŪ", "yýỳỷỹỵÿ", "YÝỲỶỸỴŸ", "zžżź", "ZŽŻŹ"] : ["aàáảãạăằắẳẵặâầấẩẫậäåāąAÀÁẢÃẠĂẰẮẲẴẶÂẦẤẨẪẬÄÅĀĄ", "cçćčCÇĆČ", "dđďDĐĎ", "eèéẻẽẹêềếểễệëěēęEÈÉẺẼẸÊỀẾỂỄỆËĚĒĘ", "iìíỉĩịîïīIÌÍỈĨỊÎÏĪ", "lłLŁ", "nñňńNÑŇŃ", "oòóỏõọôồốổỗộơởỡớờợöøōOÒÓỎÕỌÔỒỐỔỖỘƠỞỠỚỜỢÖØŌ", "rřRŘ", "sšśșşSŠŚȘŞ", "tťțţTŤȚŢ", "uùúủũụưừứửữựûüůūUÙÚỦŨỤƯỪỨỬỮỰÛÜŮŪ", "yýỳỷỹỵÿYÝỲỶỸỴŸ", "zžżźZŽŻŹ"];\n      let r = [];\n      return e.split("").forEach(i => {\n        s.every(s => {\n          if (-1 !== s.indexOf(i)) {\n            if (r.indexOf(s) > -1) return !1;\n            e = e.replace(new RegExp(`[${s}]`, `gm${t}`), `[${s}]`), r.push(s);\n          }\n\n          return !0;\n        });\n      }), e;\n    }\n\n    createMergedBlanksRegExp(e) {\n      return e.replace(/[\\s]+/gim, "[\\\\s]+");\n    }\n\n    createAccuracyRegExp(e) {\n      const t = "!\\"#$%&\'()*+,-./:;<=>?@[\\\\]^_`{|}~¡¿";\n      let s = this.opt.accuracy,\n          r = "string" == typeof s ? s : s.value,\n          i = "string" == typeof s ? [] : s.limiters,\n          o = "";\n\n      switch (i.forEach(e => {\n        o += `|${this.escapeStr(e)}`;\n      }), r) {\n        case "partially":\n        default:\n          return `()(${e})`;\n\n        case "complementary":\n          return `()([^${o = "\\\\s" + (o || this.escapeStr(t))}]*${e}[^${o}]*)`;\n\n        case "exactly":\n          return `(^|\\\\s${o})(${e})(?=$|\\\\s${o})`;\n      }\n    }\n\n    getSeparatedKeywords(e) {\n      let t = [];\n      return e.forEach(e => {\n        this.opt.separateWordSearch ? e.split(" ").forEach(e => {\n          e.trim() && -1 === t.indexOf(e) && t.push(e);\n        }) : e.trim() && -1 === t.indexOf(e) && t.push(e);\n      }), {\n        keywords: t.sort((e, t) => t.length - e.length),\n        length: t.length\n      };\n    }\n\n    isNumeric(e) {\n      return Number(parseFloat(e)) == e;\n    }\n\n    checkRanges(e) {\n      if (!Array.isArray(e) || "[object Object]" !== Object.prototype.toString.call(e[0])) return this.log("markRanges() will only accept an array of objects"), this.opt.noMatch(e), [];\n      const t = [];\n      let s = 0;\n      return e.sort((e, t) => e.start - t.start).forEach(e => {\n        let {\n          start: r,\n          end: i,\n          valid: o\n        } = this.callNoMatchOnInvalidRanges(e, s);\n        o && (e.start = r, e.length = i - r, t.push(e), s = i);\n      }), t;\n    }\n\n    callNoMatchOnInvalidRanges(e, t) {\n      let s,\n          r,\n          i = !1;\n      return e && void 0 !== e.start ? (r = (s = parseInt(e.start, 10)) + parseInt(e.length, 10), this.isNumeric(e.start) && this.isNumeric(e.length) && r - t > 0 && r - s > 0 ? i = !0 : (this.log("Ignoring invalid or overlapping range: " + `${JSON.stringify(e)}`), this.opt.noMatch(e))) : (this.log(`Ignoring invalid range: ${JSON.stringify(e)}`), this.opt.noMatch(e)), {\n        start: s,\n        end: r,\n        valid: i\n      };\n    }\n\n    checkWhitespaceRanges(e, t, s) {\n      let r,\n          i = !0,\n          o = s.length,\n          n = t - o,\n          a = parseInt(e.start, 10) - n;\n      return (r = (a = a > o ? o : a) + parseInt(e.length, 10)) > o && (r = o, this.log(`End range automatically set to the max value of ${o}`)), a < 0 || r - a < 0 || a > o || r > o ? (i = !1, this.log(`Invalid range: ${JSON.stringify(e)}`), this.opt.noMatch(e)) : "" === s.substring(a, r).replace(/\\s+/g, "") && (i = !1, this.log("Skipping whitespace only range: " + JSON.stringify(e)), this.opt.noMatch(e)), {\n        start: a,\n        end: r,\n        valid: i\n      };\n    }\n\n    getTextNodes(e) {\n      let t = "",\n          s = [];\n      this.iterator.forEachNode(NodeFilter.SHOW_TEXT, e => {\n        s.push({\n          start: t.length,\n          end: (t += e.textContent).length,\n          node: e\n        });\n      }, e => this.matchesExclude(e.parentNode) ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT, () => {\n        e({\n          value: t,\n          nodes: s\n        });\n      });\n    }\n\n    matchesExclude(t) {\n      return e.matches(t, this.opt.exclude.concat(["script", "style", "title", "head", "html"]));\n    }\n\n    wrapRangeInTextNode(e, t, s) {\n      const r = this.opt.element ? this.opt.element : "mark",\n            i = e.splitText(t),\n            o = i.splitText(s - t);\n      let n = document.createElement(r);\n      return n.setAttribute("data-markjs", "true"), this.opt.className && n.setAttribute("class", this.opt.className), n.textContent = i.textContent, i.parentNode.replaceChild(n, i), o;\n    }\n\n    wrapRangeInMappedTextNode(e, t, s, r, i) {\n      e.nodes.every((o, n) => {\n        const a = e.nodes[n + 1];\n\n        if (void 0 === a || a.start > t) {\n          if (!r(o.node)) return !1;\n          const a = t - o.start,\n                c = (s > o.end ? o.end : s) - o.start,\n                h = e.value.substr(0, o.start),\n                l = e.value.substr(c + o.start);\n          if (o.node = this.wrapRangeInTextNode(o.node, a, c), e.value = h + l, e.nodes.forEach((t, s) => {\n            s >= n && (e.nodes[s].start > 0 && s !== n && (e.nodes[s].start -= c), e.nodes[s].end -= c);\n          }), s -= c, i(o.node.previousSibling, o.start), !(s > o.end)) return !1;\n          t = o.end;\n        }\n\n        return !0;\n      });\n    }\n\n    wrapMatches(e, t, s, r, i) {\n      const o = 0 === t ? 0 : t + 1;\n      this.getTextNodes(t => {\n        t.nodes.forEach(t => {\n          let i;\n\n          for (t = t.node; null !== (i = e.exec(t.textContent)) && "" !== i[o];) {\n            if (!s(i[o], t)) continue;\n            let n = i.index;\n            if (0 !== o) for (let e = 1; e < o; e++) n += i[e].length;\n            t = this.wrapRangeInTextNode(t, n, n + i[o].length), r(t.previousSibling), e.lastIndex = 0;\n          }\n        }), i();\n      });\n    }\n\n    wrapMatchesAcrossElements(e, t, s, r, i) {\n      const o = 0 === t ? 0 : t + 1;\n      this.getTextNodes(t => {\n        let n;\n\n        for (; null !== (n = e.exec(t.value)) && "" !== n[o];) {\n          let i = n.index;\n          if (0 !== o) for (let e = 1; e < o; e++) i += n[e].length;\n          const a = i + n[o].length;\n          this.wrapRangeInMappedTextNode(t, i, a, e => s(n[o], e), (t, s) => {\n            e.lastIndex = s, r(t);\n          });\n        }\n\n        i();\n      });\n    }\n\n    wrapRangeFromIndex(e, t, s, r) {\n      this.getTextNodes(i => {\n        const o = i.value.length;\n        e.forEach((e, r) => {\n          let {\n            start: n,\n            end: a,\n            valid: c\n          } = this.checkWhitespaceRanges(e, o, i.value);\n          c && this.wrapRangeInMappedTextNode(i, n, a, s => t(s, e, i.value.substring(n, a), r), t => {\n            s(t, e);\n          });\n        }), r();\n      });\n    }\n\n    unwrapMatches(e) {\n      const t = e.parentNode;\n      let s = document.createDocumentFragment();\n\n      for (; e.firstChild;) s.appendChild(e.removeChild(e.firstChild));\n\n      t.replaceChild(s, e), this.ie ? this.normalizeTextNode(t) : t.normalize();\n    }\n\n    normalizeTextNode(e) {\n      if (e) {\n        if (3 === e.nodeType) for (; e.nextSibling && 3 === e.nextSibling.nodeType;) e.nodeValue += e.nextSibling.nodeValue, e.parentNode.removeChild(e.nextSibling);else this.normalizeTextNode(e.firstChild);\n        this.normalizeTextNode(e.nextSibling);\n      }\n    }\n\n    markRegExp(e, t) {\n      this.opt = t, this.log(`Searching with expression "${e}"`);\n      let s = 0,\n          r = "wrapMatches";\n\n      const i = e => {\n        s++, this.opt.each(e);\n      };\n\n      this.opt.acrossElements && (r = "wrapMatchesAcrossElements"), this[r](e, this.opt.ignoreGroups, (e, t) => this.opt.filter(t, e, s), i, () => {\n        0 === s && this.opt.noMatch(e), this.opt.done(s);\n      });\n    }\n\n    mark(e, t) {\n      this.opt = t;\n      let s = 0,\n          r = "wrapMatches";\n\n      const {\n        keywords: i,\n        length: o\n      } = this.getSeparatedKeywords("string" == typeof e ? [e] : e),\n            n = this.opt.caseSensitive ? "" : "i",\n            a = e => {\n        let t = new RegExp(this.createRegExp(e), `gm${n}`),\n            c = 0;\n        this.log(`Searching with expression "${t}"`), this[r](t, 1, (t, r) => this.opt.filter(r, e, s, c), e => {\n          c++, s++, this.opt.each(e);\n        }, () => {\n          0 === c && this.opt.noMatch(e), i[o - 1] === e ? this.opt.done(s) : a(i[i.indexOf(e) + 1]);\n        });\n      };\n\n      this.opt.acrossElements && (r = "wrapMatchesAcrossElements"), 0 === o ? this.opt.done(s) : a(i[0]);\n    }\n\n    markRanges(e, t) {\n      this.opt = t;\n      let s = 0,\n          r = this.checkRanges(e);\n      r && r.length ? (this.log("Starting to mark with the following ranges: " + JSON.stringify(r)), this.wrapRangeFromIndex(r, (e, t, s, r) => this.opt.filter(e, t, s, r), (e, t) => {\n        s++, this.opt.each(e, t);\n      }, () => {\n        this.opt.done(s);\n      })) : this.opt.done(s);\n    }\n\n    unmark(t) {\n      this.opt = t;\n      let s = this.opt.element ? this.opt.element : "*";\n      s += "[data-markjs]", this.opt.className && (s += `.${this.opt.className}`), this.log(`Removal selector "${s}"`), this.iterator.forEachNode(NodeFilter.SHOW_ELEMENT, e => {\n        this.unwrapMatches(e);\n      }, t => {\n        const r = e.matches(t, s),\n              i = this.matchesExclude(t);\n        return !r || i ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT;\n      }, this.opt.done);\n    }\n\n  }\n\n  return function (e) {\n    const s = new t(e);\n    return this.mark = (e, t) => (s.mark(e, t), this), this.markRegExp = (e, t) => (s.markRegExp(e, t), this), this.markRanges = (e, t) => (s.markRanges(e, t), this), this.unmark = e => (s.unmark(e), this), this;\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///42\n')}});